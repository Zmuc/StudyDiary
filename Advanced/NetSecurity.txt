1. OSI模型
由高到低：
1）应用层：为特定类型的网络应用提供访问OSI环境的手段，如HTTP，DHCP等
    - TCP协议服务及端口号：
        - HTTP（超文本传输协议）：80，传输Internet浏览器普通文本、超文本、音视频等数据
        - HTTPS（安全文本传输协议）：443，基于HTTP，应用了安全套接字层（SSL），可对数据进行加密和压缩
        - FTP（文件传输协议）：21（控制数据传输）/20（数据传输），用于文件传输，能进行目录操作和文件权限操作
        - SSH（安全外壳协议）：22
        - Telnet（远程登录）：23
        - SMTP（简单邮件传输协议）：25，负责服务器之间的邮件传送
        - POP3（邮局协议版本3）：110，用于支持客户端远程管理在服务器上的电子邮件
        - IMAP（交互式邮件存取协议）：143，类似POP3，但客户端收取的邮件会保留在服务器上，同时客户端上的操作会反馈到服务器上
    - UDP协议服务及端口号：
        - DNS（域名服务器）：53，用于域名解析
        - TFTP（简单文件传输协议）：69，类似TCP上的FTP，仅进行文件上传和下载
2）表示层：对数据进行翻译、加密、压缩等操作
3）会话层：确定会话的连接和中断
4）传输层：负责向两个主机中进程之间的通信提供端到端接口
    - 传输控制协议（TCP）：面向连接，面向字节流，可靠，全双工
        - TCP报文（封装在网络层的IP数据报中）：
            - 报头：源端口（16位），目的端口（16）；
                   序列号（32，SYN标识位1时为初始序列号）；
                   确认序列号（32，如果ACK标识位1则为准备接收的报文序列号）；
                   数据偏移（4，数据从何处开始），保留（6），标识位（6：URG、ACK、PSH、RST、SYN、FIN），窗口大小（16）；
                   校验和（16），紧急指针（16，URG标识位1时生效）；
                   选项（1 - ？，长度不定，没有选项即1字节的域等于0）
            - 数据：TCP报文负载的数据
        - 三次握手：
            - A -> B：客户端A向服务器B发出建立连接请求，SYN=j（j为序列号，SYN标识位为1）
            - A <- B：服务器B收到并确认客户端A，SYN=k，ACK=j+1（ACK为确认，确认号为收到的序列号+1）
            - A -> B：客户端A收到并确认服务端B，ACK=k+1
        - 四次挥手：
            - A -> B：客户端A数据发送完，向服务器B发出释放连接请求，FIN=m（m为序列号，FIN标识位为1）
            - A <- B：服务器B收到并确认客户端A，等待数据传输完成，ACK=m+1（ACK为确认，确认号为收到的序列号+1）
            - A <- B：数据传输完成，向客户端A发出释放连接请求，FIN=n，ACK=m+1
            - A -> B：客户端A收到并确认服务端B，ACK=n+1
    - 用户数据报协议（UDP）：无连接，面向报文，不可靠
        - UDP报文（封装在网络层的IP数据报中）：
            - 报头：源端口（16位），目的端口（16）；
                   长度（16，UDP报文长度，最小为8，只有报头），校验和（16）
            - 数据：UDP报文负载的数据
5）网络层：处理不同网络之间的数据路由和发送，包括路由选择、分段组合、流量/拥塞控制等
    - 网际协议地址（IP地址，IPv4/IPv6）：为互联网每个网络/主机分配一个逻辑地址（网络拓扑分配）
        - IP数据报（封装在数据链路层的帧的数据中）：
            - 报头：IP协议版本（4位），报头长度（4），服务类型（8：优先权3 短延时位1 高吞吐位1 高可靠位1 保留2），总长度（16）；
                   标识（16，MTU导致分片后正确重组），标志（3，无效-能否分片-后面还有分片），片偏移（13，片在分组相对位置）；
                   生存时间（8，限制路由跳数），上层协议标识（8，TCP/UDP等），校验和（16，通过报头校验有效性）；
                   源IP地址（32）；
                   目的IP地址（32）；
                   选项（1 - 40，支持排错、测量以及安全等，IPv6固定）
            - 数据：不同MTU（最大传输单元）存在分片问题，将数据分成连续片
        - IPv4分类（IPv4 32位， 分网络地址 + 主机地址）：
            - A类：1-127.x.x.x（0x），单播地址，网络地址8，主机地址24
            - B类：128-191.x.x.x（10x），单播地址，网络地址16，主机地址16
            - C类：192-223.x.x.x（110x），单播地址，网络地址24，主机地址8
            - D类：224-239.x.x.x（1110x），多播地址
            - E类：240-255.x.x.x（11110x），保留
            - 特殊地址：全0/全1，127.0.0.1（代表本地IP地址）-127.255.255.255用于回路测试
            - 默认子网掩码：网络地址为1，主机地址为0
            - 子网划分（从主机地址划子网）：把每类IP网络划分成子网，如255.255.255.192/26代表子网掩码有26个1，其子网数有(主机地址位-(32-26))^2
            - 超网划分（从网络地址划超网）：把若干小网络组合成超网
            - 公网连Internet，私网连局域网
    - 地址解析协议（ARP）：实现IP地址到MAC地址的转换
        - 发送ARP包，通过FF:FF:FF:FF:FF:FF + IP广播，获取目的MAC地址
        - ARP攻击：主要存在局域网中，通过发送ARP欺骗包（伪造IP及MAC地址），进行嗅探（截取数据再转发），网关欺骗（无法上网），IP地址冲突
    - Internet控制报文协议（ICMP）：用于在IP主机、路由器之间传递控制消息
        - ICMP报文包含在IP数据报的数据中
        - 消息类型：
            - 响应请求：发送响应请求报文（type=8），没有异常则返回应答请求报文（type=0），如ping
            - 目标不可到达，源抑制和超时报文：发送不可达报文（type=3， code=？），告知具体的不可达信息（code决定）
            - 时间戳：发送时间戳请求报文（type=13），收到返回的时间戳应答报文（type=14），计算来回一次的传输时间
        - ICMP攻击：通过发送ICMP报文，进行ICMP超限尺寸攻击（部分操作系统设限导致内存分配错误），ICMP报文轰炸（长时间，大量，连续）
    - Internet组管理协议（IGMP）：用于在IP主机和与其直接相邻的组播路由器之间建立、维护组播组成员关系
        - 组播：IP主机发给组播路由器（1份），组播路由器发给需要的组播组成员（多份）
        - IGMPv1：管理组播组成员基于查询（由组播路由协议如PIM决定IGMP查询器）和响应（超时响应来确定组播组成员离开）机制
        - IGMPv2：增加了查询器选举机制（IP地址最小成为查询器）和离开组（通知）机制
        - IGMPv3：增强了主机控制，查询和报告报文
    - 路由选择协议：
        - RIP协议：基于距离矢量的动态路由选择协议
        - OSPF协议：开放式最短路径优先
6）数据链路层：对电信号进行分组，即以太网协议Ethernet（标准），用于处理同一网络中不同设备之间的通信
    - 帧：一组电信号，分成报头head和数据data
        - 报头（固定18字节）：发送者/源MAC地址（6字节），接收者/目的MAC地址（6字节），数据类型（6字节）
        - 数据（46 - 1500字节）：数据包具体内容，超过最大限制分片
    - MAC地址（12位16进制）：Ethernet规定接入网络的设备都必要网卡，源/目的地址便是网卡的地址，即MAC地址（制造商分配）
    - 数据链路层工作方式：局域网广播
7）物理层：物理/硬件，中间物理链接如光缆、电缆、双绞线、无线电波；中间电信号，即010101...二进制
8）应用层，表示层，会话层 -> 应用层；数据链路层，物理层 -> 网络接口层

2. sshd_config部分详解
1）MaxSessions：控制单个TCP连接上支持的多路复用会话的数量
    - MaxSessions=0：禁止登录/shell/子系统会话
    - MaxSessions=1：禁用多路复用
    - MaxSessions=2+：允许多路复用

3. iptables
1）iptables位于用户空间，是一个命令行工具，其本质是Netfilter（Linux操作系统核心层内部的数据包处理模块）
2）iptables链：
    - INPUT：输入，到本机某进程的报文
    - OUTPUT：输出，由本机的某进程发出的报文（如响应报文）
    - PREROUTING：路由前，接收到报文，判断目的是否为本机，是则INPUT，否则FORWARD
    - FORWARD：转发
    - POSTROUTING：路由后，发送报文
3）iptables表：
    - filter表（内核模块：iptables_filter）：过滤，适用于INPUT，FORWARD，OUTPUT
    - nat表（iptable_nat）：网络地址转换功能，适用于路由/转发
    - mangle表（iptable_mangle）：拆解报文并修改，再重新封装，可用于ALL
    - raw表（iptable_raw）：关闭nat表上启用的连接追踪机制，适用于PREROUTING，OUTPUT
    - 规则优先级：raw -> mangle -> nat -> filter
4）匹配条件：
    - 基本匹配条件：源地址Source IP，目标地址Destination IP
    - 扩展匹配条件：源端口Source Port, 目标端口Destination Port
5）处理动作：
    - ACCEPT：允许数据包通过
    - DROP：直接丢弃数据包，不给任何回应信息，发送端超时才知
    - REJECT：拒绝数据包通过，必要时会给发送端发送响应
    - SNAT：源地址转换，解决内网用户用同一个公网地址上网的问题
    - MASQUERADE：是SNAT的一种特殊形式，适用于动态的IP
    - DNAT：目标地址转换。、
    - REDIRECT：在本机做端口映射
    - LOG：/var/log/messages文件中记录日志信息，不做处理
6）iptables使用举例：iptables -t filter -I INPUT -s x.x.x.x -j DROP
    - t：指定要操作的表，不使用-t默认操作filter表
    - I：插入，即在添加规则（默认链首（可跟编号指定插入位置），-A则是在链尾添加，-D删除指定编号，-F清空）
    - s：匹配条件中的源地址
    - j：匹配条件满足时执行的处理工作
    - 解释：将规则[将来自x.x.x.x的报文都丢弃]插入filter表中

4. 密码系统
1）密钥：密钥（Secret Key）用于加解密数据的工具（明文plaintext<->密文ciphertext）
    - 对称密钥：信息发送方和接收方使用同一个密钥加密和解密数据，加/解密速度快
        - 流密码算法：也称序列密码算法，将明文根据密钥逐位异或（XOR）加密（明文 XOR 密钥 = 密文）
            - RC4：密钥长度可变，用可变长度为1~256字节的密钥来初始化256字节的状态向量S={0，1，…，255} 
                - 向量初始状态：S = [0, 1, 2, ..., 255]
                - 创建临时向量T（256位），如果密钥K也为256位，则直接将K赋给T；否则重复复制K，直至填满T
                - T产生S的初始排序，从S[0]到S[255]，根据T[i]的方案，将S[i]与另一个元素（S[j]）交换
                - 根据S生成伪随机密码流
                - 根据伪随机密码流对明文进行异或加密
        - 块密码算法：也称分组密码算法，数据分组加密（明文长度必须为分组长度的整数倍，非整数倍需填充，解密需要补位）
            - 迭代模式：
                - ECB（Electronic Code Book）：电子密码本模式
                    - 第n组明文加密后，得到第n组密文
                - CBC（Cipher Block Chaining）：密文分组链接模式
                    - 第1组明文 XOR 初始化向量（全0），再加密得到第1组密文
                    - 第n组明文 XOR 第n-1组密文，再加密得到第n组密文（n≥2）
                - CFB（Cipher FeedBack）：密文反馈模式
                    - 第1组明文 XOR 加密后的初始化向量，得到第1组密文
                    - 第n组明文 XOR 加密后的第n-1组密文，得到第n组密文（n≥2）
                - OFB（Output Feedback）：输出反馈模式
                    - 第1组明文 XOR 加密后的初始化向量（记为加密输出，当前为第1组），得到第1组密文
                    - 第n组明文 XOR 第n组加密输出（由第n-1组加密输出再次加密而得），得到第n组密文（n≥2）
                - CTR（CountTeR）：计数器模式
                    - 计数器（nonce+分组序列），nonce随机（当次加密固定），分组序列初始1（当次每组+1）
                    - 第1组明文 XOR 加密后的计数器1（初始值，即1），得到第1组密文
                    - 第n组明文 XOR 加密后的计数器n（为计数器<n-1>+1，即n），得到第n组密文（n≥2）
            - 加密算法：
                - DES（Data Encryption Standard）：数据加密标准
                    - 密钥：（8字节64位[8位校验位 + 56 有效密钥]）
                    - 算法：
                        - 明文数据（8字节64位）在初始IP置换后分为两部分（各32位，L0，R0）
                        - 两部分经过16轮同样的运算
                        - 两部分交换再连接，再逆置换得到密文（8字节64位）
                - 3DES（3 Data Encryption Standard）：三重数据加密标准
                    - 密钥：（8字节64位[8位校验位 + 56 有效密钥]），多个密钥
                    - 算法：
                        - 明文数据（8字节64位）经密钥进行三次DES加密
                        - 为兼容DES，采用加密->解密->加密方式（若密钥相同，前两重抵消，即为DES）
                - AES（Advanced Encryption Standard）：高级加密标准
                    - AES-128：密钥16字节128位，加密轮数10次
                    - AES-192：密钥24字节192位，加密轮数12次
                    - AES-256：密钥32字节256位，加密轮数14次
                    - 算法：
                        - 明文数据分组，分组长度128位（16字节）
                        - 第0轮初始变换（不在上述的加密轮次中），轮密钥加
                            - 轮密钥：原来的密钥通过密钥编排算法得到，每轮不一样
                                - 密钥编排算法包含密钥扩展和轮密钥选取
                                - 密钥扩展算法：来将原来的16/24/32字节密钥扩展成长密钥，扩展密钥长度=(加密轮次+1)×16字节
                                - 轮密钥选取算法：从长密钥中选取若干部分，使其充当AES每一轮迭代的轮密钥
                        - 多轮加密：
                            - 字节代替：对明文的每一个字节，通过S盒查表代替（高4位是S盒表行值，低4位是S盒表列值），解密用逆S盒
                            - 行移位：将16字节明文排列成4×4，第1/2/3/4行循环左移0/1/2/3字节，解密循环右移
                            - 列混淆：将16字节明文排列成4×4，每一列都是一个系数GF(2^8)在域上的次数小于4的多项式s(x)，有[s(x)*c(x)] mod m(x)，其中c(x)={03}x^3+{01}x^2+{01}x+{02} m(x)=x^4+1，其中{}是十六进制数 
                            - 轮密钥加：将明文与轮密钥按位异或
    - 非对称密钥：也称公开密钥，使用不同的密钥来分别完成加密和解密操作，信息发送者用公钥加密，而信息接收用私钥解密（公钥送出，密钥留存）
        - 加密算法：
            - RSA（发明者姓氏首字母组合）：基于大素数相乘后的大整数难以分解
                - 密钥：
                    - 准备两个非常大的素数，记为p，q（二进制下，至少1024位）
                    - 计算乘积p×q
                    - 计算乘积的欧拉函数(p-1)×(q-1)
                    - gcd(m, e)=1，即m，e互素，且1<e<m
                    - e×d mod m=1，d为e在模m域上的逆元
                    - 公钥(n, e); 私钥(n, d)
                - 算法：
                    - 公钥(n, e)加密：设明文为x，密文为y，有y=x^e mod n
                    - 私钥(n, d)解密：设明文为x，密文为y，有x=y^d mod n
            - ECC（Ellipse Curve Ctyptography）：椭圆曲线加密算法
                - 密钥：相较RSA短很多
                    - 根据椭圆曲线Ep(a, b)并取其上一点，作为基点G
                    - N作为G的阶，且有k<N（整数）
                    - 选择k作为私钥
                    - 根据k生成公钥：K=Gk
                - 算法：
                    - 公开：公钥K，椭圆曲线Ep(a, b)，基点G
                    - 加密：明文通过编码得到Ep(a, b)上一点g，并产生随机整数n且n<N，求出C1=g+nK，C2=nG
                    - 解密：C1-kC2=(g+nK)-k(nG)=g+nGk-knG=g，再对g点解码便可得到明文
        - 数字签名算法：
            - RSA（发明者姓氏首字母组合）：RSA的数字签名算法
                - MD5（Message-Digest Algorithm 5）：信息-摘要算法5，128位
                - SHA-2（Secure Hash Algorithm-2）：安全散列算法2（SHA-224/SHA-256/SHA-384/SHA-512），其中SHA-256主流签名算法，256位
            - DSA（Digital Signature Algorithm）：数字签名算法，公开两个素数
                - 用SHA-1/SHA-2将原文加密产生消息摘要
                - 用私钥对消息摘要再次加密得到数字签名，并传递原文和数字签名
                - 用公钥对数字签名解密得到消息摘要，再用SHA-1/SHA-2将原文加密产生消息摘要
                - 将两个消息摘要对比，一致则说明传输过程安全
2）数字签名
    - 消息摘要是对一个数据块的数字指纹（一串固定长度的字符串，由哈希函数生成），随数据块的变化而变化
    - 数字签名是基于非对称密钥密码体制的，认证消息是否是私钥持有人创建的
    - 数字签名原理：
        - 信息发送方使用自己的私钥加密消息摘要->数字签名，使用接收方公钥加密正文
        - 信息接收方使用发送方公钥解密数字签名->消息摘要，使用自己的私钥解密得到正文，再根据正文计算出消息摘要，对比相同则表示没有被篡改过
3）数字证书
    - 数字证书由CA机构（Certificate Authority）颁布，认证公钥，保证公钥不被篡改
    - 数字证书原理：
        - CA根据自己的私钥，对需认证的公钥及相关信息进行加密，生成数字证书
        - 接收方使用CA公钥解密数字证书，获取发送方公钥，然后进行数字签名及密钥等处理
    - CA颁布的数字证书（主流X.509）：
        - 版本号
        - 序列号
        - 签名算法：算法，参数
        - 发行者
        - 有效期：过期不可信
        - 主体
        - 主体的公钥信息：公钥，算法，参数
        - 标识符及扩充

5. 随机数
1）随机性：
    - 统计学伪随机性：给定的随机比特流样本中，1和0的出现频率大致相同
    - 密码学安全的伪随机性：通过给定的随机比特流样本中一部分+随机算法，不能有效演算出样本中的剩余部分
    - 真随机性：给定的随机比特流样本不可重现（给定边界条件，真随机数并不存在）
2）随机数：
    - 伪随机数：约定不变值（种子）作为输入，用不变值相关确定的算法决定输出
    - 真随机数：根据完全随机，不可复制的输入，不可复现输出
3）伪随机字节产生器（PRNG）：以初始密钥作为种子，输出不断重复的周期密钥流（周期越长，破解越困难）
4）伪随机函数（PRF）：给定随机产生的密钥，该函数是定义在输入到输出的随机函数（随机函数是输入到输出的每个元素定义的函数集合中随机选取）

6. PKI
1）公开密钥基础设施（PKI，Public Key Infrastructure），利用公开密钥机制建立起来的基础设施（网络身份证明书/证书）
2）PKI是数字证书的制作和分发的一种机制：
    - 证书：如X.509协议的证书
    - CA：认证机构，用于注册证书
    - RA：注册机构，注册证书的地方
    - CRL：证书吊销列表，如果用户私钥丢失，必须吊销证书
    - 证书库：网络上存储证书的文件系统，也可不入库，直接分发证书（证书丢失可从这里找回，私钥丢失只能申请吊销）
    - 应用接口（API）：为用户提供通讯和使用等安全服务
3）生成证书的方式：
    - 标准CA签发：受信任的第三方CA
        - 客户端生成一对公私钥文件
        - 基于公钥生成证书请求文件.csr
        - 将证书请求文件.csr提交给CA得到证书.crt/.cer
        - CA颁发证书给客户端
    - 自签名CA签发：自己创建的CA
        - 生成服务器私钥
        - 生成证书请求文件.csr
        - 对证书请求文件.csr签名（服务器私钥）并得到证书.crt/.cer
    - 私有CA签发：企业或组织内部创建的CA
        - 生成CA私钥
        - 生成CA的自签名证书
        - 生成服务端私钥
        - 生成证书请求文件.csr
        - 用CA证书对证书请求文件.csr签名（CA私钥）并得到证书.crt/.cer
4）PKI的实现：OpenSSL（以私有CA签发为例）
    - 生成CA私钥：openssl genpkey -algorithm RSA -out ca_private.key -pkeyopt rsa_keygen_bits:4096
    - 生成CA的自签名证书：openssl req -new -x509 -days 3650 -key ca_private.key -out ca_certificate.crt -subj "/C=XX/ST=XX/L=XX/O=XX/OU=XX/CN=XX"
    - 生成服务端私钥：openssl genpkey -algorithm RSA -out server_private.key -pkeyopt rsa_keygen_bits:2048
    - 生成证书请求文件：openssl req -new -key server_private.key -out server.csr -subj "/C=XX/ST=XX/L=XX/O=XX/OU=XX/CN=XX"
    - 生成证书：openssl x509 -req -days 3650 -in server.csr -CA ca_certificate.crt -CAkey ca_private.key -set_serial 01 -out server_certificate.crt

7. PKCS#11
1）PKCS#11（PKCS，Public-Key Cryptography Standards）公钥加密标准
2）定义了独立于技术的程序设计接口（API，Application Programming Interface），接口称为Cryptoki（Cryptographic token interface），只定义库的接口，不定义库的实现
3）主要用于智能卡和HSM
4）涉及常用的加密对象类型（生成，修改，删除）：
    - RSA密钥
    - DES/三重DES密钥
    - X.509证书（不支持管理）
    - 还支持各种哈希算法、对称加密算法、非对称加密算法和消息认证码算法等

8. HSM
1）HSM（Hardware Security Module）硬件安全模块，是一种自主的硬件，用于车辆安全信息（如密钥相关，且隔离外部恶意软件的攻击）
2）HSM用于构建，验证可靠的软件，以完成安全启动（在软件加载并初次访问之前）
3）HSM包含有加解密的硬件加速功能，能够有效降低CPU负载
4）HSM EVITA（E-safety Vehicle Intrusion Protected Applications），硬件可信方案：
    - Full：完整，支持基于硬件加速的非对称算法，用于保护V2X（Vehicle-to-Everything）外部通信，提供最大程度的功能性和安全性
        - CBB（Cryptographic Building Block）：密钥构建模块，包含对称算法（AES），非对称算法（RSA，ECC），哈希算法，随机数生成器（AESPRNG），单向计数器（Counters）
        - LBB（Logic Building Block）：逻辑构建模块，包含内部配置/执行管理的CPU，配套的安全存储（RAM，NVM），及提供对外通信的数据接口（EVITA HW接口）
    - Medium：中等，不支持基于硬件加速的非对称算法和哈希算法，以保护内部ECU，处理性能较Full稍差
        - 与Full的差异在CBB：没有非对称算法（RSA，ECC），哈希算法
    - Light：轻量，只是个安全硬件扩展
        - 与Full的CBB差异：没有CBB的概念，支持对称算法（AES）硬件加速
        - 与Full的LBB差异：没有LBB的概念，没有独立CPU，不支持可编程，提供对外通信的数据接口（EVITA HW接口）
5）HSM实现方式：
    - 内置HSM：HSM与MCU或SoC芯片集成在一起，HSM与Host侧通过IRQ/Shared RAM通信
    - 外置HSM：HSM不与CU或SoC芯片集成在一起，HSM与Host侧通过SPI/UART/I2C通信
