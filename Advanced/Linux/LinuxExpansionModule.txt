0. Open Source License
1）Open Source License，开源许可证/协议，对开源软件的开发、发布、引用、传播等流程做了法律协议规定
2）开源协议中的概念：
    - 获取/复制：获取开源软件的源码
    - 引用/使用：将开源软件作为底层的库来引用（link）
    - 修改：对开源软件源码进行修改（二次开发）
    - 衍生：将第三方库集成到自己的软件，或进行二次开发，衍生出新的软件
    - 发布/分发：发布源码或软件
    - 版权：
        - Copyright：软件的版权和其它一切权利归作者私有，用户只有使用权，没有其它权利
        - Copyleft：软件的版权归作者所有，其它一切权利归任何人所有
3）开源软件与公域软件（Public Domain）的区别：开源软件有作者，需遵循开源协议；公共软件无作者，无任何要求
4）开源协议：
    - GPL（GNU General Public License）：GNU通用公共许可证，！！！GPL协议存在传染性
        - 引用或修改必须（整体）开源
        - 引用或修改必须以相同协议发布
        - GPLv1：GPL版本1，1989/2/25
        - GPLv2：GPL版本2，1991/6
            - 与GPLv1的不同：
                - 描述更新和改进
                - 引入Liberty or Death章节（规定修改GPL软件并再次发布，也必须以此协议发布）
                - 增加对其他开源许可证兼容
        - GPLv3：GPL版本3，2007/6/29
            - 与GPLv2的不同：
                - 篇幅更长，描述更清晰
                - 更适用于专利保护（基于GPLv3软件的相关专利，用户也可以使用）
                - 与更多的开源许可证兼容
    - LGPL（GNU Lesser General Public License）：GNU宽通用公共许可证
        - 修改库必须（整体）开源，而引用库接口不必
        - 修改库必须以相同协议发布，而引用库接口不必
        - LGPLv2.0：GNU Library General Public License，作为GPLv2库的补充协议，1991
        - LGPLv2.1：GNU Lesser General Public License，1999/2
            - 与LGPLv2.0的不同：
                - 明确了发布定义：即以源代码方式发布，必须开源（调用库接口则不必）
        - LGPLv3.0：GNU Lesser General Public License，2007/6/29
            - 与LGPLv2.1的不同：
                - 专利方面的改进，提供详细条款
                - 对引用有更详细的定义：静态链接需要将引用的库以相同协议开源（即便没有修改）；动态链接则不需要
                - 允许动态链接库之间存在循环依赖关系
    - MPL（Mozilla Public License）：Mozilla公共许可证
        - 修改部分必须开源（仅指以源代码方式发布），对引用没有要求
        - 修改无偿捐献给该软件，其版权归属原作者
        - 需要对修改部分说明
        - MPLv1.0：MPL版本1.0，1998/10/31
        - MPLv1.1：MPL版本1.1，2004
            - 与MPLv1.0的不同：
                - 消除了“发布者”的限制，可以和任何软件结合使用
                - 修改无偿捐献给该软件，其版权归属原作者
                - 明确可部分开源
        - MPLv2.0：MPL版本2.0，2012/1/3
            - 与MPLv1.1的不同：
                - 明确可与任何软件链接（此前未提及）
                - 明确禁止对软件反汇编
                - 要求派生作品必须以相同协议发布，并维护原作者的版权
    - BSD License（Berkeley Software Distribution license）：Berkeley软件套件许可证
        - 说明版权，不对开源做要求
        - BSD 4-clause：Original BSD License/Old BSD License
            - 1. 源代码的再分发必须保留版权声明（copyright）、条件列表、免责声明（保留原BSD协议）
            - 2. 二进制的再分发必须在随分发提供的文档或其他材料中复制版权声明、条件列表、免责声明（保留原BSD协议）
            - 3. 所有提及本软件功能或用途的广告必须显示以下声明：本产品包括由[*]开发的软件（类似鸣谢）
            - 4. 未经事先明确的书面许可，不得使用版权所有者的姓名或贡献者的姓名来认可或推广由此软件衍生的产品
        - BSD 3-clause：New BSD License/Modified BSD License
            - 与BSD 4-clause的不同：
                - 取消了第3条
        - BSD 2-clause：Simplified BSD License/FreeBSD License
            - 与BSD 4-clause的不同：
                - 取消了第3条与第4条
    - MIT（Massachusetts Institute of Technology） License：又称X License/X11 License
        - 可复制、使用、修改、合并、出版发行、散布、再授权及贩售软件及软件副本
        - 可根据需要修改授权条款为适当的内容，即不用遵循MIT协议
        - 在软件及软件副本中都必须包含版权声明和许可声明
    - Apache License：Apache许可证
        - 提供一份Apache Licence
        - 需要对修改部分说明
        - 在延伸的代码中需要带有原来代码中的协议，商标，专利声明和其他原作者规定需要包含的说明
        - 如果存在Notice则需要带有Apache Licence，可以增加其他协议但不可修改Apache Licence

1. ACL
1）ACL（Access Control Lists，访问控制列表）
2）对单一用户设定访问文件的权限
3）命令：
    - getfacl：查看文件/目录设定的ACL权限
    - setfacl：设置用户/群组对指定文件的访问权限
        - setfacl -m u:userA:rx /fileB：userA用户对/fileB文件有rx权限
        - setfacl -m d:g:groupA:rwx /dirB：groupA群组对/dirB目录新建文件有rwx权限（默认）
        - setfacl -m u:userA:rx -R /dirB：userA用户对/dirB目录下所有文件（递归）有rx权限
        - setfacl -x u:userA /fileB：删除userA用户对/fileB文件的ACL权限
        - setfacl -b /fileB：清空/fileB文件所有的ACL权限
        - setfacl -k：删除默认

2. Linux-PAM
1）PAM（Pluggable Authentication Modules，可插拔认证模块）
2）PAM配置位于/etc/pam.d/，管理对程序的认证方式
3）模块类型：
    - auth（认证）：对用户身份进行识别
    - account（帐号）：对帐号属性进行检查
    - session（会话）：定义用户登录/退出时的操作
    - password（密码）：使用用户信息更新
4）控制标记：
    - required：该模块认证失败后继续，待所有模块执行后返回错误信息
    - requisite：该模块认证失败后立即退出
    - sufficient：该模块认证通过后立即返回成功信息（会导致前面失败的模块结构忽略），认证失败后同optional
    - optional：该模块认证失败后也允许接收应用程序提供的服务
5）模块路径：即调用模块（pam模块动态库）的位置，位置不定，但一般都在$PATH中
6）模块参数：即传递给模块的参数，多参数以空格分隔
7）配置：模块类型 控制标记 模块路径 模块参数
    - 举例：password    requisite    pam_cracklib.so retry=3
8）常用PAM模块：
    - pam_access[auth|account|password|session]：日志式登录访问控制
    - pam_cracklib[password]：根据字典单词检查密码
    - pam_debug[auth|account|password|session]：调试PAM堆栈
    - pam_deny[auth|account|password|session]：锁定/拒绝访问
    - pam_echo[auth|account|password|session]：打印文本信息
    - pam_exec[auth|account|password|session]：调用外部命令
    - pam_env[auth|account|password|session]：设置/取消设置环境变量
    - pam_ftp[auth]：匿名/ftp访问
    - pam_faildelay[auth]：设置应用程序失败时的延迟
    - pam_filter[auth|account|password|session]：过滤器，提供对用户和应用程序（tty，stdin/stdout）间输入/输出访问
    - pam_group[auth]：（用户）组访问
    - pam_issue[auth]：将问题文件添加到用户提示符
    - pam_keyinit[session]：核心会话密钥环初始化器
    - pam_mail[auth|session]：通知可用/新邮件
    - pam_mkhomedir[session]：创建用户主目录
    - pam_motd[session]：显示motd文件
    - pam_localuser[auth|account|password|session]：在/etc/passwd中列出用户
    - pam_loginuid[session]：将用户的loginuid记录到进程属性
    - pam_lastlog[auth|account|session]：显示上次登录日期并执行inactive
    - pam_limits[session]：限制资源（/etc/security/limits*）
    - pam_listfile[auth|account|password|session]：基于任意文件拒绝/允许服务
    - pam_namespace[session]：为会话配置命名空间
    - pam_nologin[auth|account]：阻止非root用户登录
    - pam_permit[auth|account|password|session]：始终允许访问（nobody）
    - pam_pwhistory[password]：记住最近的密码（防止用户频繁更改为此密码）
    - pam_pwquality[password]：密码质量检查（替代pam_cracklib）
    - pam_rootok[auth]：获得root访问权限（用户UID=0，则进行身份验证）
    - PAM_rhosts[auth]：标准网络身份验证（从远程主机连接的远程用户）
    - pam_succeed_if[auth|account|password|session]：测试帐户特征
    - pam_selinux[session]：SELinux默认安全上下文
    - pam_securetty[auth|account|password|session]：将root登录限制为特殊设备（安全tty，/etc/securetty）
    - pam_sepermit[auth|account]：SELinux强制模式时，根据/etc/security/sepermit.conf拒绝/允许用户登录
    - pam_shells[auth|account]：用户shell在/etc/shell中列出时才允许登录
    - pam_tally[auth|account]：登录计数（失败计数，成功重置），失败过多拒绝访问
    - pam_tally2[auth|account]：登录计数（失败计数，成功重置），失败过多拒绝访问（有自动解锁功能）
    - pam_time[account]：通过时间控制访问（/etc/security/time.conf）
    - pam_timestamp[auth|session]：使用缓存的身份验证（成功）进行身份验证（一定时间内）
    - pam_tty_audit[session]：为指定用户启用/禁用tty audit审计
    - pam_umask[session]：设置文件模式创建掩码（默认权限）
    - pam_unix[auth|account|password|session]：传统密码进行身份验证（/etc/passwd，/etc/shadow）
    - pam_userdb[auth|account]：根据db数据库进行身份验证
    - pam_wheel[auth|account]：仅wheel组成员允许root访问权限
    - pam_warn[auth|account|password|session]：记录（syslog）所有PAM项目
    - pam_xauth[session]：用户间转发xauth密钥（cookie）

3. SELinux
1）SELinux（Security Enhanced Linux）是强制访问控制（MAC）的内核模块/安全子系统，最大限度地减小系统中服务进程可访问的资源（最小权限原则）
2）SELinux主要概念：
    - 主体Subject：进程
    - 客体Object：文件、端口、设备等
    - 策略Policy：/etc/sysconfig/selinux：SELINUXTYPE=targeted|minimum|strict|default|mls
        - Linux发行版策略：
            - targeted：CentOS默认策略，只对网络服务进程保护
            - minimum：CentOS策略，修改过的targeted，对其部分网络服务进程保护
            - strict：CentOS策略（CentOS 5启用，现已废除），严格对所有进程保护
            - default：Ubantu默认策略
            - mls：多级安全保护策略，复杂且限制更严格
        - 自定义策略（自定义生成类似发行版策略的Policy包）：
            - .te（Type Enforcement）：私有策略文件，主要是类型强制规则
            - .if（Interface File）：外部接口文件，可用于其他模块
            - .fc（File Context）：文件安全上下文/标签文件，定义模块文件的安全上下文
            - .spt（Support）：策略支持宏，如许可集合等
            - .pp：由上述源文件编译成的策略模块
            - policy.x：由.pp链接而成的策略文件（x为版本号，出于兼容性考虑）
    - 安全上下文：访问控制属性，也称标签
        - 安全上下文分进程安全上下文和文件安全上下文
            - 文件安全上下文：
                - rpm包安装文件：根据rpm包内记录生成
                - 手动创建文件：根据当前策略（SELINUXTYPE）生成
                - cp文件：重新生成
                - mv文件：不变
                - 运行程序：根据PAM的pam_selinux.so模块设置生成
        - 安全上下文格式：USER:ROLE:TYPE:LEVEL[:SENSITIVITY:CATEGORY]
            - 用户USER：
                - user_u ：普通用户登录系统后的预设
                - system_u ：开机过程中系统进程的预设
                - root ：root登录系统后的预设
            - 角色ROLE：
                - object_r：文件、目录和设备等
                - system_r：系统程序
            - 类型TYPE：
                - 将主体和客体划分为不同的组，给每个组定义了一个类型，为进程运行提供最低的环境权限（决定访问权）
                - 当某主体类型和执行中的进程关联时，也称呼为域domain
            - 安全级别LEVEL：mls策略
                - 敏感度SENSITIVITY：敏感性声明，最低s0（默认）
                - 类别CATEGORY（可选）：无序且不相关的列表，c1，c3无序/c1.c3有序（c1 - c2 - c3）
    - 策略机制：
        - 类型强制（TE，Type Enforcement）
            - 类型规则
                - 类型type：SELinux无预定义类型，必须在使用前声明
                    - type a_t; // 声明a_t类型
                - 属性attribute：表示一组类型
                    - attribute a; // 声明a属性
                - 关联typeattribute：关联类型和属性
                    - type a_t, a; // 声明a_t类型并关联a属性
                    - typeattribute a_t a1, a2; // a1，a2属性关联已声明a_t类型
                - 别名typealias：类型更改后的兼容性考虑
                    - type a_t alias aa_t, a; // 声明a_t类型并取别名aa_t，关联a属性
                    - typealias a_t alias aa_t; // aa_t作为已声明a_t类型的别名
            - 访问向量（AV，Access Vector）规则
                - AV规则格式：rule source_type target_type:class per_set
                - rule规则：
                    - allow：允许主体对客体执行操作
                    - auditallow：允许主体对客体执行操作，且记录信息
                    - neverallow： 不允许主体对客体执行操作
                    - dontaudit：不记录违反规则的信息
                - source_type：主体类型
                - target_type：客体类型
                - class：客体类别
                - per_set：许可
                - 举例：allow a_t b_t : file {read execute}; // 允许主体类型a_t对客体类型b_t的文件进行读和执行
        - 基于角色的访问控制（RBAC，Roles Based AccessControl）
            - 用户-角色：限定用户的角色
                - user a_u roles {a1_r a2_r ...}
            - 角色-类型：限定角色的类型
                - role a_r types {a1_t a2_t ...}
3）SELinux工作模式：/etc/sysconfig/selinux：SELINUX=enforcing|permissive|disabled
    - enforcing：阻止违反SELinux规则的行为，且记录信息
    - permissive：不阻止违反SELinux规则的行为，只记录信息
    - disabled：关闭SELinux
4）SELinux运作机制：
    - 1. 某进程p为主体，其类型t1（安全上下文u:r:t1:s0）
    - 2. 某文件/path/f为客体，其类型t2（安全上下文u:r:t2:s0）
    - 3. 主体对客体进行read和write操作
    - 4. 主体通过SELinux服务器读取策略文件（policy.x），获得相关规则：allow t1 t2: file {read execute}
    - 5. 主体对客体，read成功，write失败
    - 6. 经访问向量缓存（AVC，Access Vector Cache）生成失败信息，写入/var/log/audit/audit.log（依赖auditd）
    - 7. 失败信息：type=AVC msg=audit(x): avc: denied { write } for pid=473 comm="p" path="/path/f" scontext=u:r:t1:s0 tcontext=u:r:t2:s0 tclass=file permissive=1
5）其他：
    - SEBOOL：通过设置布尔值sebool（on|off，1|0），来禁止SELinux服务（服务开启状态决定某些AV规则是否生效）
    - SEPORT：无法通过修改服务配置文件来更改端口，只能用过特定语句来允许服务对端口的权限
    - SELinux内核CONFIG：
        - CONFIG_SECURITY_SELINUX：SELinux支持
        - CONFIG_SECURITY_SELINUX_BOOTPARAM：SELinux内核引导参数支持，selinux=0禁用/selinux=1启用
        - CONFIG_SECURITY_SELINUX_BOOTPARAM_VALUE：SELinux内核引导参数的默认值
        - CONFIG_SECURITY_SELINUX_DISABLE：运行时禁用SELinux支持
        - CONFIG_SECURITY_SELINUX_DEVELOP：SELinux开发支持，除非在内核引导参数指定enforcing=1，强制内核以permissive模式运行
    - SELinux用户态git仓：
        - selinux：SELinux核心
            - libselinux：SELinux基础环境
            - libsemanage：SELinux策略管理
            - libsepol：SELinux二进制策略处理
            - checkpolicy：SELinux策略编译器，生成二进制策略（policy.x）
            - secilc：SELinux CIL编译器，将CIL语言编译成二进制策略
            - selinux-utils：SELinux基础工具
            - policycoreutils：SELinux策略核心工具
            - restorecond：SELinux策略刷新工具
            - mcstrans：SELinux mls安全级别翻译工具
        - refpolicy：SELinux策略
        - setools：SELinux策略分析工具，如seinfo，sesearch等
6）常用命令：
    - getenforce：查看SELinux状态
    - setenforce 0|1：切换SELinux状态
        - 0：permissive
        - 1：enforcing
    - sestatus -v：SELinux详细报告
    - ls -Z：显示文件（客体）安全上下文
    - ps -Z：显示进程（主体）安全上下文
    - chcon -t public_content_t /mnt/mytest：修改/mnt/mytest的安全上下文为public_content_t（临时）
    - semanage fcontext -l：查看已设定的所有安全上下文
    - semanage fcontext -a -t public_content_t '/mnt/newtest(/.*)?'：在/mnt目录下新增newtest目录并修改其安全上下文为public_content_t
        - a：新增
    - semanage port -a -t http_port_t -p tcp xxx：将xxx端口加入http端口中
        - a：新增
        - t：目标的类型标识符
        - p：指定端口协议或Internet协议
    - restorecon：刷新安全上下文
        - F：强制重置安全上下文
        - v：显示安全上下文更改过程
        - R：递归更改文件/目录的安全上下文
    - getsebool -a：显示所有的sebool
    - setsebool -P ftp_home_dir on：将ftp_home_dir --> off修改为开启，即允许认证用户可以读写自己的主目录中的文件（ftp_home_dir）
        - P：直接将修改写入配置文件
    - touch /.autorelabel：该文件存在时重启系统会重新标签
    - seinfo -t：查看所有声明
        - t：查看类型声明
    - sesearch --allow -t a_t：查看a_t类型相关的所有allow规则
7）sepolicy
    - 策略模块文件：
        - .te：TE策略
        - .fc：文件安全上下文
        - .if：TE策略接口
    - SELinux策略编译过程：.te/.if -①-> .mod （+ .fc） -②-> .pp -③-> cil -④-> policy.x
        - ①：将.te/.if（类似c语言中的.c/.h）策略编译成.mod
        - ②：.mod加上记载文件安全上下文的.fc编译成模块文件.pp
            - 模块文件.pp可用pp命令查看，包含模块详细的语法（type/roletype/typeattributeset/allow/dontaudit/optional/filecon...）
        - ③：.pp进一步编译成cil
            - cil（Common Intermediate Language）：通用中间语言，介于多种高级策略语言（SELinux是其之一）与低级内核策略表示形式之间
        - ④：将cil编译进policy.x
        - 其中①②，④步骤皆有语法检测，有错误会失败退出
            - ①②：检测模块内语法，如双重定义，allow主客体类型未定义...
            - ④：检测模块间语法，如接口内类型定义无效，各模块语法冲突（allow和neverallow）...
    - SELinux策略如何写：
        - 首先在*/policy/modules/目录下创建自定义模块目录（mymodules）
        - 自定义模块目录下创建metadata.xml（<summary>自定义模块描述</summary>）
        - 创建SELinux策略模块文件（xxx.te/.fc/.if）
        - 在xxx.fc中加上文件安全上下文
            - xxx二进制命令一般为xxx_exec_t
            - xxx配置文件一般为xxx_etc_t
            - xxx库一般为xxx_lib_t
            - xxx文档一般为xxx_doc_t
            - xxx需要特殊权限的文件一般增加相应字段
                - xxx特殊权限文件xxx_add（xxx_add_exec_t，xxx_add_etc_t，xxx_add_lib_t等）
        - 在xxx.te中编写具体策略规则
            - user xxx_u;  // 安全上下文用户声明，命名一般*_u，用来限定角色
            - role xxx_r;  // 安全上下文角色声明，命名一般*_r，用来限定类型
            - type xxx_t;  // 安全上下文类型声明，命名一般*_t，核心
                - typealias xxx_t alias xxx_old_t;  // 类型别名，出于兼容性考虑
            - attribute xxx_type;  // 安全上下文属性声明，命名一般*_type，类型集合
                - typeattribute xxx_t xxx1_type, xxx2_type;  // 将类型和属性关联
            - allow xxx_t xxx_etc_t:file { read write };  // 权限设置（白名单机制，不设置都无权限）
            - type_transition user_t xxx_exec_t:process xxx_t;  // 域转换
                - 域转换先决条件（以user_t为例）：
                    - allow user_t xxx_exec_t:file execute;    // 用户对二进制命令有执行权限
                    - allow user_t xxx_t:process transition;   // 用户可由当前域向进程域转换的权限
                    - allow xxx_t xxx_exec_t:file entrypoint;  // 二进制命令作为进程域进入的权限
                - 解释：user_t用户，执行命令（xxx_exec_t）后域转换（user_t -> xxx_t）
        - 在xxx.if中编写策略接口（可以理解为函数）
            - 接口应有描述信息（<summary>接口描述</summary>）
            - interface(`xxx_if',`gen_require(`type xxx_t;') allow $1 ***;')
                - xxx_if：接口名
                - xxx_t：声明参数
                - allow $1 ***：接口内规则
                    - $1：传入的第一个参数
            - 高频接口/宏：
                - can_exec(xxx_t, xxx_exec_t)：xxx_t对xxx_exec_t的执行权限
                - init_daemon_domain(xxx_t, xxx_exec_t)：xxx_exec_t类型的文件，以xxx_t作为守护进程/服务的域
                - init_system_domain(xxx_t, xxx_exec_t)：xxx_exec_t类型的文件，以xxx_t作为短期进程的域
                - init_script_file(xxx_exec_t)：xxx_exec_t作为初始化脚本的权限
                - init_unit_file(xxx_unit_t)：xxx_unit_t作为systemd unit文件的权限
                - files_config_file(xxx_etc_t)：xxx_etc_t作为配置文件的权限
    - 其他重要文件：
        - */policy/support/misc_macros.spt：其他宏
            - can_exec(domain,executable)：执行权限
        - */policy/support/misc_patterns.spt：域转换
            - *transition_pattern/*process_pattern/*trans_pattern
        - */policy/support/file_patterns.spt：文件
            - *_dirs_pattern：目录权限
            - *_files_pattern：普通文件权限
            - *_lnk_files_pattern：软链接权限
            - *_fifo_files_pattern：管道权限
            - *_sock_files_pattern：套接字权限
            - *_blk_files_pattern：块设备权限
            - *_chr_files_pattern：字符设备权限
            - filetrans_*_pattern：类型转换
            - admin_pattern：文件类型管理
        - */policy/support/obj_perm_sets.spt：集合
            - *_set：文件类别集合
            - *_perms：执行许可/操作集合

4. systemd
1）systemd是系统与服务管理器，其后台服务进程PID=1
2）systemd特性：
    - 服务按需启动
    - 服务并发启动（通过配置依赖项确保启动顺序）
    - 使用cgroups跟踪管理服务的生命周期
    - journald：统一管理服务日志
3）systemd架构：
    - Linux Kernel：内核涉及模块
        - cgroups：控制组群（Control groups），限制、控制与分离一个进程组的资源
        - autofs：自动检测文件系统并挂载（若存在），自动卸载不活跃的文件系统
        - kdbus：内核中实现的D-Bus，可传输大块数据，用于GB级的消息流
    - 依赖库Libraries：运行所依赖的动态库
        - dbus-1：D-Bus，轻量IPC
        - libpam：PAM模块
        - libcap：网络数据包捕获
        - libcryptsetup：磁盘加密
        - libaudit：Audit审计
        - tcpwrapped：tcp_wrappers，主机访问控制
        - libnotify：桌面通知
    - 目标Targets：启动阶段/运行级别
        - poweroff
        - rescue
        - multi-user
        - graphical
        - reboot
    - 守护进程Daemons：相关守护进程
        - systemd：systemd服务主守护进程
        - journald：日志守护进程
        - networkd：网络守护进程
        - logind：登录守护进程
    - 工具Utilities：二进制命令工具
        - systemctl：检查/控制系统服务和资源的状态
        - journalctl：查看系统日志/服务日志
        - bootctl：查看/管理系统启动分区
        - loginctl：管理系统已登录用户/Session的信息
        - systemd-notify：通知服务的状态变化
        - systemd-analyze：分析系统本次启动时服务所消耗的时间
        - systemd-cgls：递归显示cgroups继承链
        - systemd-cgtop：显示cgruops top
        - systemd-nspawn：创建systemd容器
4）systemd Unit：
    - Unit文件目录：优先级从高到低
        - /etc/systemd/system
            - /etc/systemd/system/multi-user.target.wants：multi-user.target分组中开机启动服务
        - /run/systemd/system
        - /usr/lib/systemd/system
    - Unit文件类型：
        - .target：Unit逻辑分组，引导其它Unit执行，即运行级别
            - 0/poweroff.target：关闭系统
            - 1/rescue.target：单用户模式
            - 2/mulit-user.target：用户定义/域
            - 3/mulit-user.target：多用户模式
            - 4/mulit-user.target：用户定义/域
            - 5/graphical.target：图形模式
            - 6/reboot.target：重启
            - emergency：急救模式
        - .service：服务启动配置
            - [Unit]
                - Description=SELinux init service loading：Unit描述信息
                - DefaultDependencies=no：默认依赖项
                - After=local-fs.target：在local-fs.target分组服务启动之后启动
                - Before=sysinit.target：在sysinit.target分组服务启动之前启动
            - [Service]
                - Type=oneshot：启动模式
                    - simple：默认值
                    - forking：fork()形式创建子进程
                    - oneshot：一次性进程，systemd会等待进程退出
                    - dbus：通过D-Bus启动
                    - notify：启动完毕通知systemd继续
                    - idle：等待其他任务执行完成
                - ExecStart=/usr/bin/selinux-init.sh：当前服务执行命令
            - [Install]
                - WantedBy=multi-user.target：服务当前的分组
        - .automount：控制自动挂载文件系统（类似autofs）
        - .device：设备（/dev）之间的依赖关系
        - .mount：系统结构层次中的一个挂载点（代替/etc/fstab）
        - .path：监控指定目录或文件的变化，并触发相应Unit运行
        - .scope：Systemd运行时产生的系统服务的分组信息
        - .slice：cgroups树（一般用户不会创建）
        - .snapshot：由systemctl snapshot命令创建的Unit运行状态快照
        - .socket：基于数据自动触发服务启动
        - .swap：虚拟内存的交换分区
        - .timer：特定时间触发的任务（代替crontab）

5. docker/podman：
1）容器，Linux主机上提供多个隔离Linux环境的操作系统级虚拟化技术
    - docker，podman都是容器，podman简单兼容docker（alias docker=podman）
2）podman是无守护进程的容器引擎，管理和运行OCI（Open Container Initiative）容器和容器镜像
3）podman容器可由root用户运行，也可由非特权用户运行
4）podman命令：
    - podman version：查看版本号
    - podman info：显示系统信息
    - podman images：列出现有的镜像
    - podman search [apache]：查找[apache]相关镜像
    - podman inspect [NAME]：查看[NAME]镜像详细信息
    - podman push [NAME]：上传[NAME]镜像
    - podman pull [NAME]：拉取[NAME]镜像
    - podman run [NAME]：运行[NAME]容器
    - podman stop [NAME]：停止[NAME]容器
    - podman start [NAME]：启动[NAME]容器
    - podman logs [NAME]：查看[NAME]容器的日志
    - podman top [NAME]：查看[NAME]容器的进程信息
    - podman rm [NAME]：删除[NAME]容器

6. OpenSSH
1）SSH（Secure SHell），安全外壳协议，一种加密的网络传输协议，进行远程控制或传输文件
    - SSH协议的实现除了OpenSSH，还有轻量级的Dropbear（Dropbear只实现了SSH v2）
2）OpenSSH是使用SSH通过计算机网络加密通讯的实现，比起Telnet，rcp等更加安全
3）OpenSSH组件：
    - ssh：远程控制（替代rlogin/Telnet）
    - scp/sftp：远程传输文件（替代rcp）
    - sshd：独立守护进程，SSH服务器
    - ssh-keygen：用于认证，生成RSA/DSA密钥
    - ssh-agent：跳过已认证的口令密码（ssh-agent启用进程在内存中保存私钥，ssh登录时向ssh-agent匹配）
    - /etc/ssh/sshd_config：OpenSSH服务配置文件

7. OpenSSL
1）SSL（Secure Sockets Layer），安全套接字层协议，在传输通信协议（TCP/IP）上实现
    - 建立在可靠的传输层协议TCP上，独立于应用层协议（应用层协议建立在SSL协议上）
2）OpenSSL组件：
    - openssl：密码工具
        - Standard commands：标准命令
        - Message Digest commands（dgst）：消息摘要命令
        - Cipher commands（enc）：加密命令
    - libssl.so：协议库
        - SSL（Secure Socket Layer）/TLS（Transport Layer Security）：可靠的传输协议（TCP），包含记录协议，握手协议
            - 记录协议（Record Protocol）：用于可靠的传输协议之上，为高层协议提供数据封装、压缩、加密等基本功能
            - 握手协议（Handshake Protocol）：用于记录协议之上，用于数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等
        - DTLS（Datagram Transport Layer Security）：不可靠的传输协议（UDP），TLS的衍生版本
    - libcrypto.so：密码算法库
        - 对称加解密算法：AES、DES、Blowfish、RC4等
        - 非对称加解密加密：RSA、DSA、ECDSA、ECC等
        - 哈希算法：SHA-1、SHA-2、MD5等
        - 数字签名算法：DSA、ECDSA等
        - 消息认证码算法：HMAC（Hash-based Message Authentication Code）等
        - 随机数生成器：各种强随机数生成器
