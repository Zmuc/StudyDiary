1. Linux操作系统启动流程
1）加载BIOS（包含硬件CPU，内存，磁盘等）
2）读取MBR主引导记录（将Boot Loader复制到0x7c00地址所在物理空间，进行引导）
3）GRUB引导（引导启动操作系统）
4）加载Kernel内核（调取内存映像进行内核解压缩，再调用start_kernel()函数来初始化各种设备）
5）init进程启动（Linux操作系统第一个守护进程init，读取/etc/inittab设定的运行等级）
6）加载rc.sysinit（Linux操作系统第一个执行的用户层文件/etc/rc.d/rc.sysinit，设定PATH、/proc、网络配置、启动swap分区等）
7）加载内核模块
8）启动rc0.d-rc6.d（初始化工作和启动相应的服务）
9）启动自定义服务（/etc/rc.d/rc.local，系统开机时会读取）
10）执行/bin/login（登录）

2. GDB
1）GDB调试的是可执行文件
2）终端命令行：gdb 可执行文件
3）GDB命令行的调试命令(gdb)：
    - 流程：
        - run/r：运行程序，可跟可执行文件需要的传参
        - start：单步运行程序，在第一句执行语句处停止
        - next/n：单步执行（过程），函数直接执行
        - step/s：单步执行（语句），函数跳转到内部语句
        - finish：结束当前函数，返回到函数调用点
        - break/b + n：在第n行设置断点
        - delete breakpoints/d + n：删除第n个断点
        - enable breakpoints：启用断点
        - disable breakpoints：禁用断点
        - continue/c：继续运行
        - quit/q：退出调试
    - 查询：
        - list/l：查看代码，可跟行号或函数名
        - info/i：查看函数内部局部变量的数值
        - info breakpoints：查看当前设置的所有断点
        - info watch：显示观察点
        - print/p：打印值及地址
        - backtrace/bt：查看函数调用的栈帧和层级关系
        - frame/f：切换函数的栈帧
        - display：追踪查看具体变量值
        - undisplay：取消追踪观察变量
        - watch：被设置观察点的变量发生修改时，打印显示
        - x NFU：查看内存，如20xw（20-20个单元，x-16进制，w-4字节每单元）
    - 其他：
        - help/h：命令帮助

3. GCC
1）GCC（GNU C Compiler -> GNU Compiler Collection，GNU编译器套件）
2）支持多种语言，如C/C++，Java，Objective C等
3）编译过程：预处理(也称预编译，Preprocessing) -> 编译(Compilation) -> 汇编 (Assembly) -> 链接(Linking)
    - 预处理
        - 展开所有的宏定义（#define）
        - 处理所有的条件预编译指令（#if，#ifdef等）
        - 删除所有注释
        - 添加行号和文件标识（调式，报错警告等行为使用）
        - 保留#pragma
    - 编译：对预处理完的文件进行一系列的词法/语法/语义分析，优化后生成相应的汇编代码
    - 汇编：对汇编代码进行处理，生成处理器能识别的指令（Binutils的汇编器as根据汇编指令和处理器指令的对照表一一翻译）
    - 链接：
        - 静态链接：编译阶段直接把静态库加入到可执行文件中，链接器必须完成符号解析和重定位（主要）
        - 动态链接：链接阶段仅加入描述信息，程序执行时再将动态库加载到内存中（可通过ldd查看可执行程序依赖的动态库/共享库）
            - GCC编译链接时的动态库搜索路径顺序：gcc命令参数-L -> 环境变量LIBRARY_PATH -> 默认路径（/lib，/usr/lib，/usr/local/lib等）
            - 二进制文件执行时的动态库搜索路径顺序：编译时指定的动态库路径 -> 环境变量LD_LIBRARY_PATH -> 配置文件/etc/ld.so.conf中 -> 默认路径
4）一步编译：gcc test.c（源码文件）-o test（二进制）
5）分步编译：
    - 预处理：gcc -E test.c -o test.i（预处理后的文件）
    - 编译：gcc -S test.i -o test.s（汇编文件）
    - 汇编：gcc -c test.s -o test.o（可重定位目标文件/机器码文件）
    - 链接：gcc test.o -o test（.out，二进制可执行目标文件）
6）链接时动态库和静态库的路径重合问题：如libtest.a和libtest.so
    - gcc链接时默认优先选择动态库
    - 指定gcc选项-static，会强制使用静态库进行链接
7）ELF文件（Executable and Linkable Format，可执行链接格式）：包括可重定向目标文件（.o）、可执行目标文件（.out）、共享目标文件（库文件，即静态库.a/动态库.so）

4. 常用的系统环境变量（持续更新...）
1）自定义系统环境变量：/etc/profile中，export VALUE=*
2）自定义用户环境变量：
    - ~/.bash_profile：存在该文件时，用户登录shell时执行，且不再执行~/.profile
    - ~/.profile：用户登录时执行
    - ~/.bashrc：用户登录时/每次打开新shell时执行
3）PATH（/usr/bin:...:/usr/sbin）：命令搜索路径
4）LD_LIBRARY_PATH：动态库搜索路径
5）HOME：用户的主工作目录/登录进入的默认目录，即~

5. 常用的系统文件/目录（持续更新...）
1）/usr：共享资源（Unix Shared Resources）目录
    - /usr/bin：系统用户使用的命令
    - /usr/sbin：超级用户使用的命令（较高级管理/系统守护程序）
    - /usr/src：内核源代码默认目录
2）/bin：命令（Binaries二进制文件）目录
3）/sbin：超级用户命令（Superuser Binaries）目录
4）/lib：动态库（Library）目录
5）/etc：系统配置文件（Etcetera）目录
    - /etc/profile：配置系统shell信息
    - /etc/hosts：本地域名解析文件
    - /etc/resolv.conf：DNS域名解析配置文件
    - /etc/rc，/etc/rc.d，/etc/rc*.d：启动/变更时各级别的脚本
    - /etc/crontab：定时计划服务
    - /etc/sudoers：sudo命令相关配置
    - /etc/syslog.conf：系统日志参数配置文件
    - /etc/passwd：用户数据，包括用户名，用户ID，用户状态，家目录等
    - /etc/group：用户组数据
    - /etc/shadow：用户影子文件，包括密码密文等
    - /etc/audit/auditd.conf：安全审计配置文件
    - /etc/audit/audit.rules：审计规则文件
6）/dev：外部设备（Device）目录
    - /dev/hda1（b）：IDE（Integrated Drive Electronics，电子集成驱动器）设备
        - a1：第1个设备（a）的第1分区
    - /dev/sda1（b）：SCSI（Small Computer System Interface，小型计算机系统接口）设备
    - /dev/mmcblk0p7（b）：MMC（MultiMedia Card，多媒体记忆卡）设备
        - blk0：块设备，序号0
        - p7：该块设备第7分区
    - /dev/loop1（b）：本地回环设备
    - /dev/ram1（b）：内存
    - /dev/fd：标准软驱（fd -> /proc/self/fd）
        - stdin -> /proc/self/fd/0
        - stdout -> /proc/self/fd/1
        - stderr -> /proc/self/fd/2
    - /dev/md：软raid（Redundant Array of Independent Disks，独立磁盘冗余阵列）设备
    - /dev/null（c）：无限数据接收设备
    - /dev/zero（c）：无限零资源设备
    - /dev/tty1（c）：虚拟终端
    - /dev/ttyS1（c）：串口
    - /dev/lp1（c）：并口
    - /dev/console（c）：控制台
    - /dev/fb0（c）：FrameBuffer（屏幕每个点映射成一段线性内存空间）
    - /dev/random/urandom（c）：随机数设备
7）/proc：进程（Processes）目录（/proc是伪文件系统，即虚拟文件系统，是系统内存的映射）
8）/root：超级用户（系统管理员root）目录
9）/home：普通用户主目录，每个用户在其下拥有单独子目录（子目录名即用户名）
10）/boot：Linux启动时核心文件的目录
11）/media：U盘、光驱等媒体设备的目录
12）/mnt：临时挂载其他文件系统的目录
13）/srv：服务启动后需提取的数据的目录
14）/sys：文件系统sysfs（进程proc，设备devfs，伪终端devpts文件系统），直观反映了内核设备树
15）/var：不断扩充，经常修改（Variable）的目录
    - /var/run：->/run
    - /var/log/messages：一般的系统日志
    - /var/log/kern.log：系统内核日志（非法接入设备时可查看）
    - /var/log/boot.log：系统启动日志
    - /var/log/auth.log：登录相关日志（ssh/sudo等）
    - /var/log/cron.d：cron定时计划任务的执行日志
    - /var/log/audit：安全审计日志的目录
16）/run：临时存储系统启动以来的信息（重启清空）
17）/tmp：临时存放文件的目录
18）/opt：可选（Optional）目录

6. 不常用的命令（持续更新...）
1）PulseAudio：
    - pacmd：在运行时重新配置PulseAudio声音服务，如pacmd list-cards查看声卡
    - pactl：控制正在运行的PulseAudio声音服务，如pactl list sources查看声卡信源

7. Linux开源代码编译安装
1）configure（配置）：./configure --prefix=软件安装路径，检测依赖的外部环境
2）make（编译）：根据生成的Makefile编译规范进行gcc 、ld等操作
3）make install（安装）：安装到系统上

8. Makefile
1）Make根据Makefile，以各源文件构建一个ELF文件（如.out/.so）
2）Makefile：
    - 目标：放在:前
        - make Tag1，编译目标Tag1（目标可定义多个）
        - make，不指定目标，则是默认第一个目标
        - 假目标：.PHONY: Tag1，声明后该目标名不会被当成文件来处理
        - 目标可依赖，被依赖
    - 依赖：Tag1 : Tag2，Tag1依赖Tag2，所以Tag2先构建
    - 命令：
        - @命令不显示在make输出中
        - 变量：
            - 变量声明：xxx = value
            - 变量调用：$(xxx)/${xxx}
            - 自动变量：
                - $@：表示该规则的目标
                - $^：表示该规则的所有依赖
                - $<：表示该规则的第一个依赖
                - echo输出$：\$$，额外的\由于shell规则，$由于Makefile规则
            - 特殊变量：
                - MAKE：表示make命令名
                - MAKECMDGOALS：表示make编译的目标
            - 扩展变量：
                - = 调用时赋值，x = a;xx = $(x)+b;x = c // c+b
                - := 直接赋值，x := a;xx := $(x)+b;x := c // a+b
                - ?= 条件赋值，x = a;x ?= b;xx ?= b // x = a, xx = b
                - += 增赋值，x = a;x += b // x = a b
    - 规则：规则 = 目标 + 依赖 + 命令
    - override：防止Makefile中定义的变量被覆盖
    - 模式：%.c即通配所有.c文件，用同一模式规则实现
    - 函数：
        - addprefix：$(addprefix prefix, text)，给text字符串加上前缀prefix
        - filter：$(filter pattern1 pattern2, text)，在text字符串中过滤出符合pattern1/pattern2模式的字符串
        - filter-out：$(filter-out pattern1 pattern2, text)，在text字符串过滤出不符合pattern1/pattern2模式的字符串
        - patsubst：$(patsubst pattern, replacement, text)，在text字符串中，将pattern替换为replacement
        - strip：$(strip text)，去掉text字符串中多余的空格
        - wildcard：$(wildcard pattern)，支持以*作为通配符

9. Cmake
1）跨平台编译/安装工具
2）CMakeLists.txt：
    - cmake_minimum_required(VERSION 2.8)：cmake最低兼容版本检查>=2.8
    - set(A b)：将A设置为b
        - set(PROJECT MyTest)：项目名称MyTest
        - set(CMAKE_C_STANDARD 99)：声明c99
        - set(CMAKE_CXX_STANDARD 11)：声明c++11
        - set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pipe -std=c99")：c编译选项
        - set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread -std=c++17 -Wall")：c++编译选项
        - set(CMAKE_BUILD_TYPE Debug|Release)：编译类型
            - Debug：CMAKE_C_FLAGS_DEBUG -> CMAKE_C_FLAGS（CXX同理）
            - Release：CMAKE_C_FLAGS_RELEASE  -> CMAKE_C_FLAGS（CXX同理）
        - set(PRJ_EXEC MyTest)：可执行文件
        - set(PRJ_EXEC_SRCS src/my_test.c)：可执行文件的源码
    - find_package(pkg QUIET|REQUIRED)：引入外部依赖包
        - pkg：依赖包
            - Module：官方，Find<pkg>.cmake
            - Config：非官方，自行编译安装支持cmake的包
                - 下载源码
                - cmake -H. -Bbuild -G "Unix Makefiles"
                - cmake --build build
                - cmake --build build --target install
        - QUIET：无输出
        - REQUIRED：必须的包
    - add_definitions(-DDEBUG -DREAL_COOL_ENGINEER)：添加全局宏定义
    - include_directories(INCLUDE)：include头文件目录
    - link_directories(LIBRARY)：lib库文件目录
    - add_executable(xxx.exe xxx1.c src/xxx2.c)：编译源文件xxx1.c，src/xxx2.c为可执行文件xxx.exe
    - target_link_libraries(xxx.exe lib1 lib2)：链接lib1.so，lib2.so到可执行文件xxx.exe
    - install(TARGETS xxx.exe)：安装
    - add_subdirectory(subdir)：创建subdir
    - message：执行打印
3）基础模板：
    - cmake_minimum_required(VERSION 2.8)                                         // Cmake version <=
    - set(PROJECT MyTest)                                                         // Project Name
    - set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread -std=c++17 -Wall -DLINUX") // Cmake Flags
    - include_directories(${PROJECT_SOURCE_DIR}/include)                          // Include Dir
    - set(PRJ_EXEC MyTest)                                                        // Exec And Src（Exec）
    - set(PRJ_EXEC_SRCS src/my_test.c)                                            // Exec And Src（Src）
    - add_executable(${PRJ_EXEC} ${PRJ_EXEC_SRCS})                                // Compile Compile
    - target_link_libraries(${PRJ_EXEC} pthread)                                  // Runtime Dependency
    - install(TARGETS ${PRJ_EXEC})                                                // Install

10. Linux文件系统
1）Linux文件系统是基于磁盘的
    - 磁盘开始区域是MBR（主引导记录，系统启动引导），剩余空间用来存储分区（partition）和分区表（记录分区信息）
    - Linux分区（partition）：|boot block|super block|inode block|data block|
        - block：磁盘数据与内存交互，将磁盘按照内存单位（4KB）划分为块
        - boot block：服务系统启动（未安装操作系统则预留）
        - super block：存储文件系统控制信息（magic number文件系统类型，inode block/data block数量等）
        - inode block（index node）：存储metadata（文件访问权限、大小、创建时间等控制信息）和data block地址
        - data block：存储文件数据（一个文件可能对应多个data block，由inode索引）
2）虚拟文件系统（VFS, Vitrual File System）
    - 将各种文件系统的公共部分提取成抽象层（属于内核，在用户态和具体的文件系统之间），提供统一接口（屏蔽差异性）
    - 虚拟文件size=0，使用了虚拟文件系统（内核运行时生成）
3）常见文件系统：
    - Ext2/3/4：扩展（Extended）文件系统，Linux默认文件系统
    - XFS：高性能64位日志文件系统，极具伸缩性（根据需求进行伸缩的能力）和健壮性
    - Swap：磁盘空间的交换分区（虚拟内存分区，2倍内存大小，不超过2GB），当内存不足时暂时替代内存
    - ISO 9660：标准的CD-ROM文件系统
    - FAT16/32（File Allocation Table）：文件分配表，16/32位空间扇区
    - VFAT：扩展文件分配表，对FAT16文件系统进行扩展（长文件名，扩展名，时间日期）
    - NTFS（New Technology File System）：更安全（网络/磁盘配额，文件加密...）的日志文件系统
    - proc：基于内存的虚拟文件系统，用来管理/proc
    - sysfs：基于内存的虚拟文件系统，用来管理/proc
    - tmpfs：基于内存的虚拟文件系统，用来管理/tmp，也可用于swap交换空间
    - NFS（Network File System）：用来实现不同主机间文件共享的一种网络服务（通过挂载使用远程共享的资源）

11. Linux内存管理
1）内存（Memory）也称主存储器，用于暂时存放CPU运算的数据，也与外存（辅助存储器）数据交互
2）虚拟内存管理：
    - 每个进程都分配了4GB的虚拟地址空间，互不干涉（32位系统为例，2^32=4G）
        - 用户空间：3G（0x00000000 - 0xBFFFFFFF），进程独立
            - 用户进程能访问用户空间，若进程切换，用户空间变化
            - 用户进程只能访问用户空间的虚拟地址，除非内陷操作/系统调用（用户进程在内核态执行，才可访问内核空间）
            - 空间分布：|代码区|数据区|堆区|栈区|
        - 内核空间：1G（0xC0000000 - 0xFFFFFFFF），由内核映射
            - 空间分布：|直接映射区|8M|动态内存映射区|8K|永久内存映射区|固定内存映射区|4K|
                - 直接内存映射区（Direct Memory Region）：内核空间起始地址，最大896M的地址区间
                    - 线性地址与物理地址直接映射：线性地址 = 物理地址 + 3G（0xC0000000）
                - 动态内存映射区（Vmalloc Region）：内核vmalloc()函数分配
                    - 线性地址空间连续，但物理地址不一定连续（高低端内存都可能）
                - 永久内存映射区（Persistent Kernel Mapping Region）：alloc_page(_GFP_HIGHMEM)分配高端内存页，或kmap()函数将高端内存映射到该区
                    - 可访问高端内存（>896M的线性地址空间，用来寻址整个物理地址，32位系统概念，64位无此问题）
                - 固定映射区（Fixing kernel Mapping Region）：每个地址服务于特定用途
                - 8M/8K/4K：安全保护区域
3）物理内存管理：
    - Linux系统中通过分页机制，把物理内存划分为N × 4K大小的内存页（Page）
    - 物理内存的分配和释放是基于内存页进行（大块内存由多个内存页拼接）
        - 分页机制直接使用会造成内存碎片
            - 内部碎片：物理内存按页（4K）分配，但只使用部分，还有很多内存未使用
            - 外部碎片：由于大块内存尽量连续拼接，所以频繁分配和释放会导致大量空闲内存页夹杂在已分配内存间
            - 页面管理算法：
                - 伙伴（Buddy）分配器：将大小相同的内存页块（连续内存页拼接成的块）用链表连接起来，解决外部碎片问题
                    - 将空闲内存划分为11个内存页块链表（1/2^0，2，4，8...1024/2^10），最大4M的连续内存
                    - 任意连续的内存页块都是2^N的和（7=2^2+2^1+2^0），以此划分加入相应的链表
                    - 分配连续16个内存页块，若无空闲则将连续32个内存页块拆分成2个连续16个内存页块
                    - 回收时检查释放内存页块（4）的前（2）后（2）连续内存是否空闲，空闲是否能组成下一等级（4+2+2=8）的空闲内存页块
                - Slab分配器：基于内存页，细分成更小内存
                    - 将内存页根据内核对象（小对象）划分为不同大小的空间（用于内核对象的缓存），解决内部碎片问题
                    - 缓存常用的内核对象，保持其初始化状态，可快速分配（内核对象生命周期：分配内存 -> 初始化 -> 释放内存，防止频繁执行消耗性能）
                    - Slab分配器申请的内存页剩余空间用来Slab着色（添加偏移使数据和Cache Line对齐，尽少次数将数据从内存读取到Cache Line）
                    - Slab分配器数据结构：object - page - slab - kmem_cache - cache_chain
                        - object：内核对象
                        - page：内存页，划分多个空间用于内核对象的缓存
                        - slab：Slab分配器的最小单位，由内存页组成（通常一个）
                        - kmem_cache：对象高速缓存，cache_chain链表节点，每个kmem_cache通常是一段连续的内存块
                            - kmem_cache中结构体kmem_list3，包含salb类型链表（slab在链表间移动）
                                - slabs_full：完全分配/全满
                                - slabs_partial ：部分分配/半满
                                - slabs_empty：未分配/空
                        - cache_chain：Slab分配器链表
4）虚拟内存分配：
    - 分配的虚拟内存未映射到物理内存，当访问时：缺页异常 -> Buddy/Slab分配物理内存
    - 内存分配：
        - 用户空间：
            - malloc()：
                - < 128KB：sbrk()/brk()分配内存
                - > 128KB：mmap()分配内存
        - 内核空间：
            - kmalloc()：分配直接内存映射区
                - 分配小块内存，物理地址连续
                - 基于Slab分配器
            - vmalloc()：分配动态内存映射区（vmalloc_start -> vmalloc_end）
                - 分配大块内存，物理地址不一定连续
                - 基于内核页表分配
5）分页与分段：
    - 分页：将物理内存划分为N × 4K大小的内存页（Page）
        - 信息的物理单位，实现内存的离散分配
        - 大小固定4K
        - 16进制线性地址（0x2B2B2B2B）
        - 读，写
    - 分段：将程序所需内存地址空间大小的虚拟空间映射到某个物理地址空间
        - 信息的逻辑单位，具有相对完善的信息（代码段，数据段，堆，栈...）
        - 长度不固定
        - 段号/段名 + 段内地址/段内偏移量
        - 读，写，执行

12. Linux I/O
1）I/O设备：都被当做特殊文件
    - 字符设备（c）：
        - 提供连续数据流，以字节/字符方式被有序访问
        - 可以直接物理磁盘读取，不经过系统缓存（对字符设备发出请求时，硬件I/O跟着发生）
        - 裸设备
        - 如串口，键盘...
    - 块设备（b）：
        - 随机访问固定大小的数据片
        - 经过高速缓存（cache），不能直接物理磁盘读取
        - 文件设备（以安装文件系统的方式使用）
        - 如磁盘，USB闪存盘...
    - 网络设备：
        - 特殊设备，负责收发送帧数据（物理帧/IP数据包）
        - 不在/dev中，是一个net_device结构（由register_netdev注册到系统）
2）I/O处理：
    - 阻塞I/O：I/O操作未完成时使进程挂起，直到相关数据到达才会返回
        - 如对管道设备、终端设备和网络设备进行读写时经常会出现这种情况
    - 非阻塞I/O：I/O操作未完成时不让进程睡眠，而是立即返回
        - 如open()、write()和read()
    - I/O多路转接：I/O操作阻塞时让其中一个函数等待，还能进行其他操作
        - 如select()和poll()
    - 信号驱动I/O：定义一个信号处理程序，系统可以自动捕获特定信号的到来，从而启动I/O（非阻塞）
        - 由内核通知，向该进程发送SIGIO信号
        - 程序收到SIGIO信号时才处理数据
    - 异步I/O：进程先让内核启动I/O操作，并在整个操作完成后通知该进程
        - 内核通知进程I/O操作何时完成的
3）CPU对I/O端口物理地址的编址方式：
    - X86：I/O映射方式（I/O-mapped）
    - ARM：内存映射方式（Memory-mapped）

13. Linux文件
1）文件的底层实现方式相关：
    - 文件类型
    - 所属文件系统
2）文件描述符：
    - 对所有文件的操作都使用文件描述符来进行的
    - 文件描述符是一个索引值（非负整数），指向内核中进程打开文件的记录表
    - 只有文件被进程操作时，才会有文件描述符
    - 每个进程都存在STDIN_FILENO（文件描述符0）、STDOUT_FILENO（1）、STDERR_FILENO（2）
3）文件类型（Linux基于文件的概念）：
    - 普通文件（-）
    - 目录文件（d）
    - 链接文件（l）
    - 设备文件：
        - 块设备（b）
        - 字符设备（c）
    - 套接字文件（s）
    - 管道文件（p）
4）文件权限（DAC，Discretionary Access Control，自主访问控制）：
    - UGO（User、Group、Other）：
        - User：文件的属主，即UID
        - Group：文件所属组，即GID
        - Other：不满足User、Ggroup的其他用户
    - RWX行为：
        - r（read）：读，读取文件/浏览目录
        - w（write）：写，增删改文件内容/增删改移动目录下文件
        - x（execute）：执行，执行文件/进入目录
        - s：x->s，对应SUID/SGID
        - t：x->t，对应SBIT
        - S/T：当s/t替代位置本身不具有x权限时，大写区分
    - SUID/SGID/SBIT：
        - SUID（s）：仅对二进制及二进制执行过程有效，执行者若对该文件有执行权限，则执行者将具有所有者的权限
        - SGID（s）：作用二进制类似SUID，作用目录可使目录下的文件属于这个目录所在的组
        - SBIT（t）：作用目录可使用户在目录下创建文件，仅有用户与root才可删除
    - ACL（Access Control List）规则：
        - 设定用户针对文件的权限，相当于扩充UGO用户组
    - Capability规则：
        - 对root行为进行细粒度控制，相当于扩充了RWX行为
            - CAP_AUDIT_CONTROL：检查或更改审计日志过滤状态/规则
            - CAP_AUDIT_READ：允许通过multicast netlink套接字读取审计日志
            - CAP_AUDIT_WRITE：允许将记录写入内核审计日志
            - CAP_BLOCK_SUSPEND：允许阻止系统挂起
            - CAP_CHOWN：允许修改文件所有者的权限
            - CAP_DAC_OVERRIDE：忽略文件的DAC访问控制
            - CAP_DAC_READ_SEARCH：忽略文件读及目录搜索的DAC访问控制
            - CAP_FOWNER：忽略文件属主ID必须和进程用户ID相匹配的限制
            - CAP_FSETID：允许设置文件的setuid位
            - CAP_IPC_LOCK：允许锁定共享内存片段
            - CAP_IPC_OWNER：忽略IPC所有权检查
            - CAP_KILL：允许对不属于自己的进程发送信号
            - CAP_LEASE：允许修改文件锁的FL_LEASE标志
            - CAP_LINUX_IMMUTABLE：允许修改文件的IMMUTABLE和APPEND属性标志
            - CAP_MAC_ADMIN：允许更改MAC配置或状态
            - CAP_MAC_OVERRIDE：覆盖MAC(Mandatory Access Control)
            - CAP_MKNOD：允许使用mknod()系统调用
            - CAP_NET_ADMIN：允许执行网络管理任务
            - CAP_NET_BIND_SERVICE：允许绑定到小于1024的端口
            - CAP_NET_BROADCAST：允许网络广播和多播访问
            - CAP_NET_RAW：允许使用原始套接字（raw socket）
            - CAP_SETGID：允许改变进程的GID
            - CAP_SETFCAP：允许为文件设置任意的capabilities
            - CAP_SETPCAP：允许向其他进程转移能力以及删除其他进程的能力
            - CAP_SETUID：允许改变进程的UID
            - CAP_SYS_ADMIN：允许执行系统管理任务，如加载或卸载文件系统、设置磁盘配额等
            - CAP_SYS_BOOT：允许重启系统
            - CAP_SYS_CHROOT：允许使用chroot()系统调用
            - CAP_SYS_MODULE：允许加载/卸载内核模块
            - CAP_SYS_NICE：允许提升优先级及设置其他进程的优先级
            - CAP_SYS_PACCT：允许执行进程的 BSD 式审计
            - CAP_SYS_PTRACE：允许跟踪任何进程
            - CAP_SYS_RAWIO：允许直接访问/devport、/dev/mem、/dev/kmem及原始块设备
            - CAP_SYS_RESOURCE：忽略资源限制
            - CAP_SYS_TIME：允许改变系统时钟
            - CAP_SYS_TTY_CONFIG：允许配置TTY设备
            - CAP_SYSLOG：允许使用syslog()系统调用
            - CAP_WAKE_ALARM：允许触发一些能唤醒系统的东西(比如CLOCK_BOOTTIME_ALARM计时器)

14. 守护进程
1）实现：
    - 子进程创建（fork），父进程退出（exit），父进程退出后子进程的父变为init进程（PID=1）
    - 子进程中创建新会话（setsid），使子进程独立（不受fork父进程的会话组，进程组等影响）
    - 更改当前工作目录（chdir），一般为/根目录
    - 重设文件权限掩码（umask）
    - 关闭从fork父进程继承的文件描述符（close）
2）异常处理：
    - syslog是Linux中的系统日志管理服务（守护进程syslogd）
    - 守护进程出错由日志服务（如syslog）将其错误信息输出到系统日志文件（如/var/log/messages）中

14. 中断
1）CPU因中断请求（内外部或预先安排的事件）暂停正在运行的程序，转而处理中断服务程序（处理完返回被中断的程序）
    - 中断请求：IRQ，Interrupt ReQuest
    - 中断服务程序：ISR，Interrupt Service Routines
        - 不可传参
        - 无返回值
        - 无重入或性能问题（如无printf()函数）
2）中断向量表（IVT，Interrupt Vector Table）
    - CPU对应每个外设资源的中断服务程序入口
    - 中断向量：中断服务程序的入口地址/存放首地址，4字节
3）中断上下文：硬件传递的参数和内核需保存的环境（被中断的进程环境）
    - 中断服务程序使用内核栈，执行应快速简短
    - 中断时不允许睡眠，阻塞：
        - 不能进程切换（无进程概念，只能被更高优先级的中断打断）
        - 不能schedule()（中断上下文没有task_struct，保存的被中断的进程上下文会因此改变）
        - 内核不可抢占（睡眠则内核挂起）
4）中断类型：
    - 内部中断/同步中断（异常，软件中断）：指令执行完成后（中断请求与代码指令同步执行）才能中断
    - 外部中断/异步中断（硬件中断）：指令执行期间可中断
5）中断top/bottom半部：
    - top（上半部）：紧急任务，响应速度快，硬件相关且不被其他中断打断
    - bottom（下半部）：非紧急任务
        - 软中断：运行在中断上下文，可延迟函数，将时间不敏感任务延迟
            - 静态创建，产生后等待内核调度
            - 不能被自己打断，只能被硬件中断打断
            - 并发运行多个CPU（可重入，可能冲突）
        - tasklet：基于软中断，无差别的队列机制
            - 有中断才执行
            - 无类型数量限制（软中断轮询，所以设置了类型数量限制）
            - 同种中断在一个CPU上执行
            - 支持SMP（Share Memory Processor）
        - 工作队列：运行在进程上下文，将工作给中断守护线程（内核线程）
            - 不同进程间切换，完成不同工作
            - 有中断才执行

15. 字节序
1）主机字节序：
    - Little-Endian：小端，低位字节排放在内存的低地址端，高位字节排放在内存的高地址端
    - Big-Endian：大端，高位字节排放在内存的低地址端，低位字节排放在内存的高地址端
2）网络字节序：4个字节的32bit值以下面的次序传输：首先是0～7bit，其次8～15bit，然后16～23bit，最后是24~31bit（大端字节序的传输次序）
