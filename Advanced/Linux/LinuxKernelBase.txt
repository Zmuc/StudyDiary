1. 目录框架
1）arch：区分处理器架构（硬件体系结构），子目录以处理器架构划分
    - x86：
        - boot：内核特定架构的代码
        - kenrel：架构特定的代码
        - include：特定架构的头文件（.h）
        - lib：通用函数在特定架构的实现（.c/.S）
        - mm：特定架构的内存管理
        - configs：特定架构的CONFIG配置文件(xxx_defconfig)
    - arm：
        - boot：
            - dts：设备树（.dts/.dtsi）
                - .dts：描述板级信息（IIC，SPI设备等）
                - .dtsi：描述SOC级信息（CPU数量，主频等）
    - arm64
    - mips
    - powerpc
    - ...
2）block：块设备，实现块设备基本框架和I/O调度
3）certs：认证，签名
4）crypto：加密/散列（Hash）算法，压缩，CRC校验等
5）drivers：设备驱动程序，子目录以设备类型划分
    - block
    - char
    - i2c
    - pci
    - usb
    - ...
6）fs：文件系统，子目录以文件系统划分
    - ext2/4
    - jffs2
    - ntfs
    - squashfs
    - xfs
    - ...
7）include：头文件（与架构无关）
8）init：内核初始化
    - main.c：核心文件，内核引导后运行start_kernel()（第一个函数）
9）ipc：进程间通信
10）kernel：内核核心
    - power：系统启动，关闭，挂起等
11）lib：库文件（与架构无关）
12）mm：内存管理（与架构无关）
13）net：网络，实现网络协议，处理网桥和DNS解析
14）scripts：内核编译脚本
15）security：安全（LSM，Linux Security Modules），子目录以安全模块划分
    - selinux：SELinux（Security Enhanced Linux），提供强制访问控制（MAC）的模块（以inode为安全标签，要求文件系统支持扩展属性）
    - apparmor：AppArmor（Application Armor），提供强制访问控制（MAC）的模块（以文件/路径名为安全标签）
    - smack：Smack
    - tomoyo：TOMOYO Linux
    - ...
16）sound：声音，ALSA、OSS音频设备的驱动核心代码和常用设备驱动
17）tools：主机必备工具（与内核交互）
18）usr：早期用户空间（initramfs），实现用于打包和压缩的cpio等
19）virt：内核虚拟机KVM

2. CONFIG配置/编译方法
1）CONFIG配置：
    - make xxx_defconfig：自动去对应目录（由make决定）检索defconfig文件，生成.config文件
    - make menuconfig：修改内核CONFIG配置（.config）
        - [ ]：N         # 不编译
        - [*]：Y         # 编译进内核
        - [M]：Module    # 编译为内核模块（不占用内存空间，可模块化安装卸载）
    - make savedefconfig：通过.config文件生成defconfg文件
    - cp defconfig arch/x/configs/xxx_defconfig：将修改后的defconfig保存
2）编译方法：
    - make：vmlinux（Virtual Memory，内核编译直接产物），Image（基于vmlinux，去掉不必要二进制码）
    - make zImage：zImage（基于Image，包含自解压代码）
    - make bzImage：bzImage（与zImage相同，但用于较大内核）
    - make uImage：uImage（基于zImage，给uboot使用）

3. 内核启动
1）start_kernel()位于init/main.c，是内核启动阶段的第一个函数
2）内核启动（start_kernel()）中的3个特殊进程：
    - idle（PID=0）：系统创建的第一个进程（唯一未fork/kernel_thread的进程），内核启动后作为进程调度
    - init（PID=1）：由idle进程kernel_thread创建（PPID=0），内核空间初始化后加载init程序并转换到用户空间执行
    - kthreadd（PID=2）：由idle进程kernel_thread创建（PPID=0），负责内核线程（都是kthreadd的子进程，PPID=2）的调度管理
3）内核启动过程（部分函数）：
    - 内核第一个函数start_kernel，即起点
        * start_kernel()        // 引导阶段后，内核启动阶段开始
        --> xxx_init()          // 内核初始化，如early_security_init()，early_trace_init()，mm_init()等
        --> rest_init()         // 内核最后的初始化，启动两个内核线程（PID=1&&PID=2）并进入死循环（PID=0）
            --> kernel_init()           // 内核线程，即init进程（PID=1）
                --> kernel_init_freeable()                // init初始化
                    |--> wait_for_completion()                // 等待kthreadd线程创建
                    |--> gfp_allowed_mask                     // 调度完成可阻塞分配
                    |--> set_mems_allowed()                   // 可分配物理页面
                    |--> do_pre_smp_initcalls()               // 执行所有early_initcall()定义的initcall函数
                    |--> smp_init()                           // SMP（Symmetrical Multi-Processing）初始化
                    |--> do_basic_setup()                     // 重要组件初始化，如驱动模型
                        |--> do_initcalls()                       // 执行其他xxx_initcall()定义的initcall函数
                    |--> console_on_rootfs()                  // u-boot的bootargs环境变量
                    |--> prepare_namespace()                  // 挂载根文件系统
                --> async_synchronize_full()              // 同步所有__init代码（阻塞过程，用以开机加速）
                --> xxx_free_init_mem()/free_initmem()    // 释放init内存
                --> system_state                          // 系统运行状态
                --> run_init_process()                    // 加载init进程（切换到用户态）
            --> kthreadd()              // 内核线程，即kthreadd进程（PID=2）
                --> kthreadd()                       // kthreadd线程执行函数
                    |--> set_task_comm()                 // 初始化进程描述符（kthreadd），用以子进程继承
                    |--> set_cpus_allowed_ptr()          // 允许kthreadd在任意CPU执行
                    |--> list_empty()                    // 判断，队列（kthread_create_list）无线程需要创建则让出CPU
                    |--> spin_lock()                     // 队列加锁（有线程需要创建的情况）
                    |--> list_entry()                    // 从队列中取出待创建线程信息（kthread_create_info）
                    |--> list_del_init()                 // 删除队列已取出的元素
                    |--> create_kthread()                // 创建线程（需先解锁队列，处理后再加锁）
                        |--> kernel_thread()                 // 创建新线程接口
                        |--> kthread()                       // 执行函数
                            |--> init_completion()               // 初始化状态
                            |--> complete()                      // 线程已创建并告知申请创建线程者
                            |--> threadfn()                      // 线程实际执行任务
                    |--> spin_unlock()                   // 去锁（队列所有元素处理完毕后解锁）
        --> schedule_preempt_disabled()   // 开启内核调度且禁止抢占
        --> cpu_startup_entry()           // 调用cpu_idle()
            |--> cpu_idle()                   // 开启死循环（空闲时），即idle进程（PID=0）

4. Security
1）LSM：
    - LSM（Linux Security Modules），可将各种安全模块集成到内核中
        - 在内核关键调用路径中插入hook函数（钩子函数）
        - LSM在Linux自主访问控制（DAC，Discretionary Access Control）后增加强制访问控制（MAC，Mandatory Access Control）
    - LSM内核空间（kernel/security/）：
        - security.c：LSM HOOK及处理函数
        - apparmor|selinux|...：LSM可选模块
    - LSM实现：举例系统调用open及子模块SELinux
        - 注册子模块：连接LSM HOOK接口和子模块处理函数
            * DEFINE_LSM()             // 定义子模块的lsm_info结构体
            --> security_init()        // 初始化LSM
                |--> initialize_lsm()      // 遍历子模块并初始化（根据lsm_info.enabled决定初始化）
                    |--> selinux_init()        // 初始化SELinux（lsm_info.init）
                        |--> security_add_hooks()  // 将SELinux注册到LSM中，即LSM HOOK -> SELinux处理函数
        - 定义子模块处理函数：
            * selinux_hooks[]          // SELinux处理函数接口表（结构体）
                |--> LSM_HOOK_INIT()       // 定义LSM HOOK接口对应的SELinux处理函数
                    |--> selinux_file_open()   // SELinux处理函数实现
        - 在系统调用路径中设置钩子（HOOK函数）：
            * open                                 // 系统调用open
            --> do_dentry_open()                       // open的实现
                |--> security_file_open()                  // LSM安全处理，再调用call_*_hook(接口函数名...)
                    |--> call_int_hook()/call_void_hook()      // open的LSM HOOK接口
                        |--> list_for_each_entry(p, head, member)  // 根据接口函数名，执行注册子模块的处理函数
    - 重要函数及结构：
        - #define LSM_HOOK(RET, DEFAULT, NAME, ...);
            - 宏，LSM HOOK接口定义，定义接口名称，返回值，参数等
            - RET：返回类型
            - DEFAULT：默认值
            - NAME：HOOK名称
            - ...：参数
            - 举例：LSM_HOOK(int, 0, file_open, struct file *file)
                - 系统调用open的HOOK名称为file_open，参数在file（struct file *）中
        - struct security_hook_heads {...};
            - 结构体，LSM HOOK接口管理
            - #define LSM_HOOK(RET, DEFAULT, NAME, ...) struct hlist_head NAME：将LSM_HOOK -> struct hlist_head
            - 举例：&security_hook_heads.file_open;
                - security_hook_heads是哈希表，file_open是哈希表表头（hlist_head）
        - struct security_list_options {...};
            - 结构体，LSM HOOK函数
            - #define LSM_HOOK(RET, DEFAULT, NAME, ...) RET (*NAME)(__VA_ARGS__)：将LSM_HOOK -> RET (*NAME)(__VA_ARGS__)
        - struct security_hook_list {...};
            - 结构体，LSM HOOK接口列表
            - struct hlist_node list：哈希表结点
            - struct hlist_head* head：指向哈希表头
            - union security_list_options hook：LSM HOOK函数列表
            - char *lsm：LSM子模块名称
            - 举例：struct security_hook_list selinux_hooks[] = {..., LSM_HOOK_INIT(file_open, selinux_file_open), ...};
                - HOOK接口与子模块处理函数对应列表，其中file_open的处理函数为selinux_file_open()
        - #define LSM_HOOK_INIT(HEAD, HOOK);
            - 宏，快速初始化security_hook_list结构体
            - security_hook_list.head = &security_hook_heads.HEAD
            - security_hook_list.hook = { .HEAD = HOOK }
            - 举例：LSM_HOOK_INIT(file_open, selinux_file_open);
                - file_open：HOOK键（&security_hook_heads.file_open）
                - selinux_file_open：通过HOOK键（file_open），需执行的处理函数selinux_file_open()
        - void __init security_add_hooks(hooks, count, lsm);
            - 函数，注册子模块的HOOK函数
            - hooks：LSM HOOK接口列表，即struct security_hook_list[]
            - count：hooks大小
            - lsm：子模块名称
            - 举例：security_add_hooks(selinux_hooks, ARRAY_SIZE(selinux_hooks), "selinux");
                - 将selinux_hooks上所有list注册到对应的head（selinux_file_open() -> file_open）
        - struct lsm_info {...};
            - 结构体，LSM子模块信息
            - const char *name：子模块名（必须）
            - enum lsm_order order：默认为LSM_ORDER_MUTABLE
            - unsigned long flags：描述LSM的标志
            - int *enabled：由CONFIG_LSM控制
            - int (*init)(void)：子模块初始化函数（必须）
            - struct lsm_blob_sizes *blobs：子模块初始化大小
            - 举例：lsm_info.init;
                - 执行init对应的函数
        - #define DEFINE_LSM(lsm)
            - 宏，定义LSM子模块
            - lsm：LSM子模块
            - 举例：DEFINE_LSM(selinux) = {
                .name = "selinux",
                .flags = LSM_FLAG_LEGACY_MAJOR | LSM_FLAG_EXCLUSIVE,
                .enabled = &selinux_enabled_boot,
                .blobs = &selinux_blob_sizes,
                .init = selinux_init,};
                - 定义LSM子模块selinux，核心是模块名（selinux）及模块初始化函数（selinux_init）
        - #define call_int_hook(FUNC, IRC, ...)/call_void_hook(FUNC, ...);
            - 宏，LSM HOOK接口 --> 子模块处理函数
            - FUNC：接口名称
            - IRC：返回值，仅call_int_hook宏有该参数
            - 举例：ret = call_int_hook(file_open, 0, file);
                - file_open：系统调用open的HOOK接口名称
                - hlist_for_each_entry(P, &security_hook_heads.file_open, list);
                    - 宏，哈希表for循环，得到HOOK接口对应的子模块处理函数
2）SELinux
    - SELinux（Security Enhanced Linux），LSM集成的MAC安全模块之一
        - SID：内核用以映射安全上下文
    - SELinux内核空间（kernel/security/selinux/）：
        - include/classmap.h：客体类别（class）和访问类型（perm）的映射
        - ss/：SS（Security Service）
        - selinuxfs.c：SELinuxFS（SELinux File System）伪文件系统
            - 将SELinux安全上下文加到文件系统的扩展属性中
        - hooks.c：SELinux HOOK及处理函数
        - avc.c：AVC（Access Vector Cache），用于高效缓存
            - 在LSM接入SELinux时，优先在AVC中检测
    - SELinux实现：
        - 初始化：early_security_init()/早期（内核启动）LSM初始化 -> security_init()/LSM初始化 -> ordered_lsm_init()/遍历LSM模块 -> initialize_lsm()/启动LSM模块 -> lsm_info.init() -> selinux_init()
            * selinux_init()               // 初始化SELinux
                --> *_set()/*_init()           // 初始化selinux_state结构体
                --> cred_init_security()       // 初始化init任务的安全上下文（struct cred：任务的安全上下文）
                    |--> selinux_cred()            // 初始化当前进程的（task_struct，current宏获取）安全上下文
                --> avc_init()                 // 初始化AVC（Access Vector Cache）
                --> *_cache_init()             // 缓存初始化
                --> security_add_hooks()       // 将SELinux注册到LSM中
                --> avc_add_callback()         // 注册安全事件的回调
                --> fs_validate_description()  // 验证参数描述
        - 系统调用：open -> do_dentry_open() -> security_file_open()/LSM钩子 <-(file_open)/key-> selinux_file_open()/SELinux处理函数
            * selinux_file_open()        // open()系统调用的SELinux MAC
                |--> *_has_perm()            // 权限检测前的处理
                    |--> avc_has_perm()           // 权限检测
    - 重要函数及结构：
        - int avc_has_perm(struct selinux_state *state, u32 ssid, u32 tsid, u16 tclass, u32 requested, struct common_audit_data *auditdata);
            - state：SELinux状态结构体
            - ssid：主体SID
            - tsid：客体SID
            - tclass：客体类别
            - requested：权限
            - auditdata：辅助数据（audit）
            - 举例：avc_has_perm(&selinux_state, current_sid(), task_sid(p), SECCLASS_PROCESS, PROCESS__GETSCHED, NULL);
                - 判定权限：allow s_t t_t:process getsched;

5. 管道（pipefs）
1）管道分为读写两端（单向），即读端fd[0]，写端fd[1]
2）管道的fd对应文件并非是文件系统中的文件，而是存在内存中的特殊文件（即不涉及外存I/0）
3）管道的缓冲区是一个环形缓冲区，通过读写指针模拟读写端：
-----------------------------------------------------------------
(...|4K|3.7K|4K|...|4K|<-write|0（可写入）|0|read->|4K|...|4K|...)
-----------------------------------------------------------------
// 管道缓冲区是PAGE（4K=4096，单位B/Byte）的倍数，可配置（默认为16*4K）
// 某PAGE为3.7K，代表该PAGE未写满
4）管道的读写：
a. 空白管道write 4097
| |       |  | |
|0|  -->  |4K|1|
| |       |  | |
// 先写满一个PAGE，再在新的PAGE写入1
b. 再write 2048
|  | |       |  |    |
|4K|1|  -->  |4K|2049|
|  | |       |  |    |
// 当前PAGE（写指针）还有4095可用，直接将2048写入当前PAGE，即1+2048=2049
c. 再write 4097
|  |    |       |  |    |  | |
|4K|2049|  -->  |4K|2049|4K|1|
|  |    |       |  |    |  | |
// 要写入4097，当前PAGE不够用（4097>(4096-2049)），新开一个PAGE写满，再开一个PAGE写入1


6. 信号
/* 信号 */
#define  _NSIG  64  // 其中1-31（有具体宏）非实时信号，34-64（SIGRTMIN-SIGRTMAX）实时信号
/*** 信号与进程 ***/
struct task_struct {  // 进程管理结构体中涉及信号的字段
    ...
    int sigpending;  // 是否有信号需要处理（1：有；0：没有）
    ...
    sigset_t blocked;  // 被该进程屏蔽的信号集
    struct signal_struct *sig;  // 信号处理
    struct sigpending pending;  // 进程接收到的信号队列（未决）
    ...
}

/*** sig ***/
struct signal_struct {
    atomic_t count;
    struct k_sigaction action[_NSIG];  // 每个信号对应的k_sigaction结构体（也是sigaction结构体的简单封装）
    spinlock_t siglock;
};

struct k_sigaction {
    struct sigaction sa;
};
​
struct sigaction {
    __sighandler_t sa_handler;  // <typedef void (*__sighandler_t)(int);>函数指针，即信号处理函数
    unsigned long sa_flags;  // 信号处理标志位（SA_SIGINFO/SA_RESTART/SA_NODEFER）
    void (*sa_restorer)(void);  // NULL
    sigset_t sa_mask;  // 信号处理中阻塞的信号集
};

/*** pending ***/
struct sigpending {
    struct sigqueue *head, **tail;
    sigset_t signal;
};

struct sigqueue {
    struct sigqueue *next;
    siginfo_t info;
};

/* 信号发送 */
kill()
  |                    用户态
---------------------------------------------------------------------------------------
  |                    内核态
sys_kill()  // 系统调用
  |---> prepare_kill_siginfo() // 初始化kernel_siginfo
  |---> kill_something_info()  // 参数分析
               |---> kill_proc_info()->kill_pid_info()
                            |---> pid_task()  // 通过PID获得task_struct结构体
                            |---> group_send_sig_info()  // 发送信号给进程组（>0单个信号/=0当前信号组/<0指定信号组）
                                       |---> check_kill_permission()  // 检测权限
                                       |---> do_send_sig_info()
                                                    |---> send_signal()->__send_signal()  // 发送信号
                                                                  |---> __sigqueue_alloc()  // 申请sigqueue结构体（通过list_add_tail加入到sigpending结构体）
                                                                  |---> sigaddset()  // 设置标志位（sigpending->sigset_t），表示进程收到该信号（未决）
                                                                  |---> complete_signal()  // 完成发送
                                                                               |---> signal_wake_up()  // 唤醒（task_struct->sigpending设为1）

/* 信号处理 */
do_signal（根据task_struct->sigpending是否为1）
do_signal()
  |                        区分架构
--------------------------------------------------------------------------------------
  |                        统一接口
get_signal()  // 获取信号
  |---> trace_signal_deliver()  // dequeue_synchronous_signal()为true时优先处理指令产生的信号（非终止再入循环）
  |---> dequeue_signal()  // 处理队列中的信号（需上信号锁）
  |          |---> __dequeue_signal()
  |                 |---> next_signal()  // 从未决信号集中选择下一个需要处理（阻塞除外）的信号
  |                 |---> collect_signal()  // 遍历未决信号集并找到相应的信号
  |          |---> recalc_sigpending()  // 更新未决信号集，检查阻塞和挂起的信号，确认哪些信号要被传递
--------------------------------------------------------------------------------------
  |                        区分架构
handle_signal()  // 处理信号
// 如果用户态程序自定义信号处理程序，则会由内核态->用户态（执行）->内核态


99. 驱动（driver）
1）对底层硬件设备的操作进行封装，并向上层提供函数接口，通过接口驱动底层硬件
2）被驱动的设备分类：
    - 字符设备文件 -> 字符设备驱动 -> 字符设备（c）：一个字节一个字节读取，有先后顺序（面向流），不能随机读取设备内存中的数据，如串口，字符终端，键盘，鼠标等
    - 文件系统 -> 块设备驱动 -> 块设备（b）：可以从设备内存的任意位置读取一定长度的数据，如硬盘，U盘等
    - 套接字（socket） -> 协议栈 -> 网络设备驱动 -> 网络接口设备（s）：可以是硬件设备（网卡），也可以软件设备（回环接口lo）
3）Linux设备管理与文件系统紧密结合，各种设备文件存放在/dev目录下
4）字符设备和块设备都有设备号：主设备号 + 次设备号
    - 主设备号：表示一个特定的驱动程序
    - 次设备号：表示使用该驱动程序的各设备（如车灯）
5）内核中，存在一个驱动链表来管理（用设备号来检索）设备的驱动，且驱动链表有两个功能：
    - 添加：编写完驱动程序，将之加载到内核
    - 查找：调用驱动程序
6）设备驱动整体调用过程
    - 1. 用户空间调用open()到内核时，触发软中断（0x80），陷入内核空间
    - 2. open() -> system_call()，system_call()会根据设备文件名（/dev/xxx）去寻找设备号
    - 3. system_call() -> VFS中的sys_open()，sys_open()会找到驱动链表，根据设备号找到相应驱动程序（xxx）的xxx_open()
    - 4. xxx_open()预先编写，实现相应的功能
7）设备树：描述硬件平台和系统设备的数据结构
    - dts（Device Tree Source）：设备树源文件（文本文件），用于描述硬件组件的结构（树状）和配置
    - dtb（Device Tree Blob）：设备树二进制文件，由dts/dtsi文件编译而成，dtb可被内核解析并烧写（uboot指定dtb地址供内核读取）
