1.Android目录结构
1）系统目录：
    - /acct：系统回收站（删除的系统文件）
    - /apex
    - /bin -> /system/bin
    - /bugreports -> /data/user_de/0/com.android.shell/files/bugreports
    - /cache -> /data/cache：缓存
    - /config
    - /d -> /sys/kernel/debug
    - /data：用户程序目录
        - /data/app：apk文件
        - /data/data：应用数据（com.xx.appname，包名命名子目录）
    - /data_mirror
    - /debug_ramdisk
    - /dev：设备文件
    - /etc -> /system/etc：系统配置文件
    - /init -> /system/bin/init：
    - /init.environ.rc
    - /linkerconfig
    - /lost+found
    - /metadata
    - /mnt：挂载点目录
    - /odm
    - /odm_dlkm
    - /oem
    - /postinstall
    - /proc：运行时目录
    - /product
    - /sdcard -> /storage/self/primary
    - /second_stage_resources
    - /storage：存储设备
    - /storage
    - /sys：Linux内核文件目录
    - /system：Android系统文件目录
        - /system/apex
        - /system/app：系统默认应用（不可删除）
        - /system/bin：可执行的linux指令文件（ELF）
        - /system/build.prop
        - /system/etc：配置文件
        - /system/fonts：字体文件
        - /system/framework：JAVA API
        - /system/lib：核心功能类库（C/C++）
        - /system/media：媒体文件
        - /system/priv-app
        - /system/product -> /product
        - /system/system_ext -> /system_ext
        - /system/usr
        - /system/vendor -> /vendor
        - /system/xbin：开发人员linux指令文件（ELF）
    - /system_ext
    - /vendor：厂商相关
    - /vendor_dlkm


2.Android权限
1）AndroidManifest.xml注册
2）权限类别：
    - 正常权限（PROTECTION_NORMAL）：Android在处理正常权限时并不会提示用户（不涉及隐私且无害），而用户也没有办法取消这些正常权限
    - 签名权限（PROTECTION_SIGNATURE）：签名相同的应用可进行安全的数据共享
    - 危险权限（PROTECTION_DANGEROUS ）：提示用户授权
3）权限处理：检测权限（checkSelfPermission()检测危险权限，返回PERMISSION_GRANTED/PERMISSION_DENIED） -> 请求权限（PERMISSION_DENIED） -> 处理权限响应

3.Android沙盒：
1）UID -> AID：Android应用程序在安装时被赋予独特的用户标识（实际上还是UID），应用程序+Dalvik虚拟机运行在独立的进程空间（实现隔离）
2）共享UID（Shared UserId）：同一开发者，存在信任关系，可运行在同一进程空间

4.应用程序签名：
识别开发者与应用程序的信任关系，有签名才能安装，签名相同可替换，不同则作为新的应用程序安装

5.Android Framework：

6.Android架构：
1）结构
    - 应用程序层（App；System App）：桌面，闹铃，设置，日历，电话，短信等系统应用
    - 应用程序框架层（JAVA API Framework）：应用程序层APIs
        - 可扩展视图：构建应用程序，包含列表，网格，文本框，按钮
        - 内容提供器：应用程序可访问其他应用程序的进程
        - 资源管理器：提供非代码资源（本地字符串，图形，布局文件）的访问
        - 通知管理器：应用程序可在状态栏自定义通知
        - 活动管理器：管理应用程序生命周期，并提供常用的导航回退功能
    - 系统运行库/环境层（Native C/C++；Android Runtime）
        - Native层：C/C++核心库
            - libc（来自BSD的标准c库）
            - 媒体库
        - Surface Manager
               - LibWebCore
            - SGL
            - 3D libraries
            - FreeType
            - SQLite：轻量级数据库
        - Android Runtime：JAVA核心库
            - Dalvik虚拟机/ART
            - Core Libararies
    - Linux核心层（HAL；Linux Kernel）
        - 硬件抽象层（HAL，Hardware Abstraction Layer）：为应用程序框架层提供硬件显示（Audio，Bluetooth）
        - 内核层（Linux Kernel）：基础 && 核心

7.Android Binder
1）Android系统中进程间通讯（IPC）之一，C/S架构
2）Binder架构：
    - Framework层：Client端，Server端，ServiceManager（管理系统服务）
    - JNI层：调用Native层的Binder架构（JAVA -> C/C++）
    - Native层：ioctl调用驱动
    - 内核层：Binder驱动 
3）Binder机制：
    - Server端通过ServiceManager注册：
        - ServiceManager向Binder驱动全局链表binder_procs插入Server端信息
        - ServiceManager向自己的svcinfo列表缓存注册服务
    - Client端通过ServiceManager查询：
        - ServiceManager向自己的svcinfo列表查询
        - ServiceManager返回Server端BinderProxy（代理）
    - Client端通过BinderProxy发送请求：
        - BinderProxy将请求发给ServiceManager
        - ServiceManager通过共享内存，用内核copy_from_user()将请求拷入内核空间
        - Client端进入等待状态
        - Binder驱动向binder_procs Server端todo队列插入请求
        - Binder驱动执行完成后，用内核copy_to_user()将结果拷入用户空间
        - ServiceManager唤醒Client端并响应结果

8.Zygote：孵化新进程
init -> zygote -> SystemServer/Dalviks


9.SEAndroid：
1）App权限：
    - untrusted_app：不信任/第三方App，没有Android平台签名，没有system权限
    - platform_app：平台App，有Android平台签名，没有system权限
    - system_app：系统App，有Android平台签名，有system权限
2）seapp_contexts：App规则，由user，seinfo决定domain，type
    - user：App进程USER
        - system：系统App，一般为system_app
        - u0_axx：非系统App，一般为platform_app或untrusted_app
    - seinfo：App签名
        - mac_permissions.xml：定义签名和seinfo的映射（signature="@PLATFORM"->value="platform"）
        - Android.mk：LOCAL_CERTIFICATE即签名，再根据mac_permissions.xml判定seinfo，默认为default
3）service_contexts：服务标签
4）property_contexts：系统属性标签
5）genfs_contexts：
6）file_contexts

10. ADB
1）ADB（Android Debug Bridge），Android调试桥，设备通信及操作
2）ADB组成：
    - adb：本地开发环境，包含adb的client及server端
        - client端：发送命令，与server端交互（可以有多个，启动时若无server端运行则会自动起）
        - server端：运行在TCP:localhost:5037（127.0.0.1:5037）的后台进程，接受并处理client端的请求，usb端口对应设备（client端与adbd的桥梁）
    - adbd：运行在设备上的守护进程
3）通信方式：
    - adb（client端 <-> server端）：
        - 普通模式：
            - request：请求长度（4字节16进制） + 内容
            - response：
                - 成功：OKAY（4字节） // host:version不返回OKAY，而是server内部版本号（4字节）
                - 失败：FAIL（4字节） + 失败响应长度（4字节16进制） + 内容
            - 具体命令：
                - HOST SERVICES：本地开发环境控制命令
                    - host:version：查看server端版本号
                    - host:kill：停止server后台进程
                    - host:devices：获取设备列表及状态
                    - host:emulator:<port>：连接指定port的模拟器
                    - host:transport:<serial-number>：连接指定serial-number的设备/模拟器
                    - host:transport-usb：连接USB上的设备（多个失败）
                    - host:transport-local：通过TCP方式连接模拟器（多个失败）
                    - host:transport-any：连接USB设备或模拟器（多个失败）
                    - host-serial:<serial-number>:<request>：向指定serial-number的设备/模拟器发送请求（多个失败）
                    - host-usb:<request>：向USB设备发送请求（多个失败）
                    - host-local:<request>：向模拟器发送请求（多个失败）
                    - host:<request>：向正在连接的设备/模拟器发送请求
                        - <host-prefix>:get-serialno：获取设备/模拟器的serial-number
                        - <host-prefix>:get-state：获取设备/模拟器的状态
                        - <host-prefix>:get-devpath：获取设备/模拟器的路径
                        - <host-prefix>:forward:<local>;<remote>：将本地连接从给定设备上的<local>转发到<remote>地址
                - LOCAL SERVICES：操作设备命令
                    - shell：登录设备SHELL（交互）
                    - shell:command arg：在设备上执行command arg
                    - remount：重新挂载设备的文件系统（read-write）
                    - sync：文件同步
                        - push：将文件发送到设备上
                        - pull：接收设备上的文件
                    - dev:<path>：打开设备上指定路径
                    - local:<path>：连接设备上指定路径
                    - log:<name>：打开设备上指定文件日志
                    - tcp:<port>：让设备连接本地开发环境的某个TCP端口
                    - tcp:<port>:<server-name>：让设备连接指定主机的某个TCP端口
        - 同步模式：由普通模式-LOCAL SERVICES-sync进入
            - sync request：同步请求类型（4字节UTF-8） + 长度（4字节小端整数）
                - LIST：列出目录中的文件
                - RECV：接收设备上的文件
                - SEND：将文件发送到设备上
                - STAT：显示文件的状态信息
            - sync response：同步响应类型（4字节UTF-8）
            - 请求响应举例：
                - LIST：
                    - DENT：LIST同步响应
                    - 文件模式（4）
                    - 文件大小（4）
                    - 上次修改时间（4）
                    - 文件名长度（4）
                    - 长度字节数（包含UTF-8的文件名）
                    - DONE&&QUIT：LIST完成并退出同步模式
                - SEND/RECV：
                    - SEND+$len（长度）：SEND同步请求，len=$remote_file_path+','+$file_mode
                    - $remote_file_path（远端文件路径）
                    - ','+$file_mode（文件权限）
                    - 文件传输（循环，直至文件被完整传输）
                        - DATA+$data_len（本次即将传输字节长度）
                        - $data_byte（传输字节<=64K）
                    - DONE&&QUIT：SEND完成并退出同步模式
    - adb <-> adbd：
        - 通信协议：24字节的报头 + 有效载荷（可选）
            - 报头格式：6 * 4字节（4 * 8 = 32bit）
                struct message {
                    unsigned command;       // 命令标识符常数（A_CNXN, ...）
                    unsigned arg0;          // 第一个参数
                    unsigned arg1;          // 第二个参数
                    unsigned data_length;   // 有效载荷长度（0 <= x <= maxdata）
                    unsigned data_crc32;    // 有效载荷CRC32（Cyclic Redundancy Check，循环冗余校验）
                    unsigned magic;         // command ^ 0xffffffff
                };
            - 消息类型：COMMAND(arg0, arg1, payload)
                - A_CNXN：CONNECT(version, maxdata, "system-identity-string")
                    - 确认远程系统的存在
                    - version：确保兼容性
                    - maxdata：声明远程系统接受的消息体最大值
                    - system-identity-string：<systemtype>:<serialno>:<banner>
                        - systemtype：bootloader|device|host
                        - serialno：唯一ID|NULL
                        - banner：版本或标识字符串
                - A_AUTH：AUTH(type, 0, "data")
                    - 身份验证
                    - type：验证类型
                        - TOKEN(1)
                        - SIGNATURE(2)
                        - RSAPUBLICKEY(3)
                    - data：数据，对应type
                        - TOKEN(1)：随机令牌，接收方用私钥对其签名
                        - SIGNATURE(2)：接收方的私钥签名，发送方若验证通过则发送CONNECT包，不通过则重复TOKEN(1)
                        - RSAPUBLICKEY(3)：公钥，当SIGNATURE(2)私钥验证全不通过时，接收方发送公钥以期望建立新的密钥
                - A_OPEN：OPEN(local-id, 0, "destination")
                    - 将local-id流连接到指定目的地（同时READY），必须有返回（READY|CLOSE）
                    - local-id：流（非0）
                    - destination：目的地
                        - tcp:<host>:<port>：省略<host>表示本地主机
                        - udp:<host>:<port>
                        - local-dgram:<identifier>
                        - local-stream:<identifier>
                        - shell：本地SHELL服务
                        - upload：推送文件的服务（如aproto's/sync）
                        - fs-bridge：FUSE协议文件系统桥
                - A_OKAY：READY(local-id, remote-id, "")
                    - 发送方local-id流已准备好写入消息，且已连接到接收方remote-id流
                    - local-id：流（非0），建立连接的READY之后的READY都忽略local-id，且不可更改
                    - remote-id：流（非0）
                - A_WRTE：WRITE(local-id, remote-id, "data")
                    - 将数据发送到接收方remote-id流，需发送方收到READY，有效载荷长度 <= maxdata
                    - local-id：流（非0）
                    - remote-id：流（非0）
                    - data：数据
                - A_CLSE：CLOSE(local-id, remote-id, "")
                    - 发送方local-id流与接收方remote-id流连接断开，不回复该消息
                    - local-id：流
                    - remote-id：流（非0）
        - 通信方式：
            - USB transports：通过USB和物理设备通信
            - Local transports：通过TCP和模拟器通信
