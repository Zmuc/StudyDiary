1. 枚举二进制取值
enum ModeType {
    mode_none = 1 << 0,   // 0000 0001
    mode_read = 1 << 1,   // 0000 0010
    mode_write = 1 << 2,  // 0000 0100
}

enum ModeType {
    // Decimal         // Binary
    mode_none = 0,     // 00000000
    mode_read = 1,     // 00000001
    mode_write = 2,    // 00000010
    mode_execute = 4   // 00000100
}
// Label                          Binary = Decimal
//     - mode_read:               00000001 = 1
//     - mode_write:              00000010 = 2
//     - mode_read | mode_write:  00000011 = 3

2. 指针与数组
// 指针，指向变量
char ch = 'w';
char *pc = &ch;

// 指针，指向字符串的首地址
const char* pstr = "www";

// 数组，会创建自己的空间
char str = "www";
str[0] = 'W';  // 可修改

// 指针数组，用来存放（int*）指针
int arr1 = 1;
int arr2 = 2;
int arr3 = 3;
int *arr[3] = {&arr1, &arr2, &arr3};

// 数组指针，指向一个数组（p先与*结合成(*p)，表明是一个指针）
int arr[3] = {0};
int (*p)[3] = &arr;
// arr，首元素（arr[0]）地址，假设为000F0000
// &arr，数组地址，为00010000
// arr+1，首元素地址+1（int型，即4），为000F0004
// &arr+1，数组地址+1（跳过数组，即3*4），为000F000C

// 指针函数，是一个函数，返回地址
int* func(){
    static int ret = 1;  // static防止函数退出时释放
    return &ret;
};

// 函数指针，指向一个函数（pfunc先与*结合成(*pfunc)，表明是一个指针）
void func1(){};
void func2(){};
----------------
void(*pfunc)();  // 函数指针
pfunc = &func1;  // 指向func1函数
(*pfunc)();  // 通过函数指针去调用func1函数
pfunc = func2;  // 指向func2函数，函数名就是函数的入口（地址）
pfunc();  // 直接调用func2函数

// 函数指针数组
void func1(int x, int y){};
void func2(int x, int y){};
----------------
void(*pfunc[2])(int, int) = { func1, func2 };  // 存放函数指针地址的数组
pfunc[0](1, 2);  // 调用func1函数，x=1，y=2

// 函数指针数组指针
void func1(int x, int y){};
void func2(int x, int y){};
----------------
void(*pfunc[2])(int, int) = {0};  // 存放函数指针地址的数组
void(*(*pfunc2)[2])(int, int);  // 定义一个指向函数指针数组的指针
pfunc2=&pfunc;  // 将函数指针数组pfunc的地址赋给指针pfunc2
pfunc[0]=func1;  // 函数func1通过函数名赋给数组pfunc第一个元素
pfunc[1]=&func2;  // 函数func2通过地址（&）赋给数组pfunc第二个元素
pfunc2[0][1](2, 3);  // 调用func2函数，x=2，y=3


3. 内存与指针
1）int x = 7;
a. int为4字节，即开辟4字节大小的空间，分配给x
---
00000000  // 0x70000001，x地址举例
---
00000000  // 0x70000002
---
00000000  // 0x70000003
---
00000000  // 0x70000004
---
b. 在x的空间内存放整数7（换算成2进制，即111）
---
00000000  // 0x70000001
---
00000000  // 0x70000002
---
00000000  // 0x70000003
---
00000111  // 0x70000004
---

2）int *p = &x;
a. 指针（int*）为4字节，即开辟4字节大小的空间，分配给p
---
00000000  // 0x80000001，p地址举例
---
00000000  // 0x80000002
---
00000000  // 0x80000003
---
00000000  // 0x80000004
---
b. x的值为7，&x是取x的地址（首地址），即0x70000001
c. 在p的空间内存放地址0x70000001（换算成2进制，即01110000 00000000 00000000 00000001）
---
01110000  // 0x80000001
---
00000000  // 0x80000002
---
00000000  // 0x80000003
---
00000001  // 0x80000004
---
3）int **pp = &p;  // 类似，地址为0x90000001，pp地址举例
4）int **ppp = &pp;  // 类似，地址为0xA0000001，ppp地址举例
5）非声明和定义时，*+指针皆是取值（取指针指向地址的内容）
---
p = 0x70000001（p是指针，指向0x70000001）
*p = 5（0x70000001地址的内容）
---
pp = 0x80000001
*pp = 0x70000001（0x80000001地址的内容）
**pp = 5
---
ppp = 0x90000001
*ppp = 0x80000001（0x90000001地址的内容）
**ppp = 0x70000001
***ppp = 5（***ppp即*(*(*ppp))）
---

4. 运算符优先级
1）一个表达式中的两个操作数具有相同的优先级，结合律应遵循：
    - 左->右：如a/b%c <-> (a/b)%c
    - 左<-右：如a=b=c <-> a=(b=c)
2）运算符优先级（由高到低）和结合律：
    - 后缀运算符（左->右）：[] () . -> ++ --
    - 一元运算符（左<-右）：++ --（前缀运算符） ! ~ + - * &
    - 类型转换运算符（左<-右）：(类型)（如int x; (double)x = 2.3）
    - 乘除运算符（左->右）：* / %
    - 加减运算符（左->右）：+ -
    - 移位运算符（左->右）：>> <<
    - 关系运算符（左->右）：< <= > >=
    - 相等运算符（左->右）：== !=
    - 位运算符与AND（左->右）：&
    - 位运算符异或XOR（左->右）：^
    - 位运算符或OR（左->右）：|
    - 逻辑运算符与AND（左->右）：&&
    - 逻辑运算符或OR（左->右）：||
    - 条件运算符（左<-右）：?:（如a>b?'y':'n'）
    - 赋值运算符（左<-右）：= += -= *= /= %= &= ^= |= <<= >>=
    - 逗号运算符（左->右）：,
3）一元运算符比二元运算符具有更高的优先级
4）运算符典型问题
    - int* p, q;  // = int *p; int q; != int *q; int *q;

5. read与write的文件操作
read：从fd1的文件偏移处（_）进行读取，同时文件偏移也会根据读取移动
// fd1：a_ b c d e f g h
write：在fd2的文件偏移处（_）写入，同时文件偏移向后移动
// fd2：A B C D E_
举例，其中buf大小为3：
/* code
 *
while ((bytes_read = read(fd1, buf, sizeof(buf))) > 0) {
    write(fd2, buf, bytes_read);
}
 *
 */
上述可拆分为（根据if判断）：
Step 1：
fd1：a b c d_ e f g h
buf：a b c（bytes_read=3）
fd2：A B C D E a b c_

Step 2：
fd1：a b c d e f g_ h
buf：d e f（bytes_read=3）
fd2：A B C D E a b c d e f_

Step 3：
fd1：a b c d e f g h_
buf：g h（bytes_read=2）
fd2：A B C D E a b c d e f g h_

Step 4（未入循环）：
fd1：a b c d e f g h_
buf：（bytes_read=0，exit）
fd2：A B C D E a b c d e f g h_
