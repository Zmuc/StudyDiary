
/* ——————————————————————————————————————————————————
 * C++ 11 新特性 */

1. 基于范围的循环
用法： for (变量 : 范围) { }
基于循环执行容器vec中的所有数据
例如：
	vector<int> vec;
	for (int i : vec) {
		...
	}

2. nullptr
nullptr为了替代NULL，类型为nullptr_t，用来区分空指针和0

3. 类型推导
1）auto只能对变量进行类型推导，不能用于推导数组类型，也不能用于函数传参（传参考虑用模板来进行函数重载）
例如：
	// cbegin()返回的数据类型为vector<int>::const_iterator，可用auto推导
	for(auto itr = vec.cbegin(); itr != vec.cend(); ++itr)
2）decltype是类型说明符，用于解决复杂的类型声明，不会实际计算表达式的值，而是分析表达式并得到它的类型。decltype可以作用于变量、表达式及函数名
例如：
	using FuncType = int(int &, int);
	int func(int &p1, int p2);
	// decltype(func) <-> FuncType
	decltype(func) *pfunc = func;
3）拖尾返回类型，使用auto推导函数的返回类型
例如：
	template<typename P, typename X>;
	auto func(P p1, X p2) -> decltype(p1 + p2) {
		return p1 + p2;
	}

4. 初始化列表
提供统一的语法来初始化任意的对象，还允许构造函数或其他函数像参数一样使用初始化列表（通过std::initializer_list）
例如：
	#include <initializer_list>

	struct Xs {
		int a;
		float b;
	};

	class  Xc {
	public:
		Xc(std::initializer_list<int> list) {}
	};

	Xs s {1, 2.3};
	Xc c = {1, 2, 3};

5. 模板增强
1）外部模板，显式告知编译器何时模板实例化
例如：
	template class std::vector<int> -> extern template class std::vector<int>;
2）“>”括号合法，不再误当>>右移运算符处理报错
例如：
	std::vector<std::vector<int>> pvector;
3）类型别名模板，新增using关键字可以为模板定义别名（传统C++ typedef支持为类型定义别名，但模板不是类型）
例如：
	template< typename T, typename U, int v>
	class OldType {
	public:
		T pt;
		U pu;
		OldType():pt(v),pu(v) {}
	};
	typedef OldType<std::vector<int>, U， 0> NewType; // 不合法，typedef无法为模板定义别名
	using NewType = OldType<int, U， 0>; // 合法，using可以为模板定义别名
4）默认模板参数，可以指定模板的默认参数类型
例如：
	template<typename T = int, typename U = int> // 默认为int类型
	auto add(T pt, U pu) -> decltype(pt+pu) {
		return pt+pu;
	}

6. 构造函数
1）委托构造，类中一个构造函数可以调用另一个构造函数
例如：
	class XClass {
	public:
		int value;

		XClass() {
			/* ... */
		}

		XClass(int v) : XClass() {  // XClass(int)调用XClass()
			value = v;
		}
};
2）继承构造
例如：
	class XClass {
		XClass(int i) {}
		XClass(double d,int i) {}
		XClass(float f, int i, const char* c) {}
		// ...
	}；

	class X1Class : XClass {
		X1Class(int i) : XClass(i) {}
		X1Class(double d,int i) : XClass(d, i) {}
		X1Class(folat f, int i, const char* c) : XClass(f, i , c) {}
		// ...
	}；

7. Lambda表达式
1）Lambda表达式提供了类似匿名函数的特性
2）基本语法：[ caputrue ] ( params ) opt -> ret { func; };
	- [ caputrue ]：捕获列表，精细控制了Lambda表达式访问及如何访问外部变量
		- []：不捕获任何变量
		- [&]：捕获外部作用域中所有变量，作为引用在函数体中使用
		- [=]：捕获外部作用域中所有变量，作为值/副本（变量可拷贝，且在Lambda创建时拷贝）在函数体中使用
		- [this]：捕获当前类this指针，具有当前类成员函数同样的访问权限，可使用当前类成员函数/成员变量（使用&/=时默认添加此选项）
		- [xxx]：按值捕获xxx变量，且不捕获其他变量
		- [=, &xxx]：默认按值捕获外部作用域中所有变量，且按引用捕获xxx变量
	- ( params )：参数表，选填
	- opt：函数选项，选填
		- mutable：函数体代码可以修改被捕获的变量，且可访问被捕获对象的non-const方法（被mutable修饰的Lambda表达式必填参数表，可以为NULL）
		- exception：是否抛出异常及何种异常
		- attribute：声明属性
	- ret：函数返回值类型（拖尾返回类型），选填
	- { func; }：函数体
3）原理：定义Lambda表达式后，编译器会自动生成匿名类（闭包类型，重载了()运算符）
4）注意事项：
	- 闭包类型禁用了赋值操作符，所以Lambda表达式不能赋值
	- 闭包类型允许复制构造函数，所以可用Lambda表达式生成副本
	- 按引用捕获可能会导致悬挂引用（Dangling references），因为引用捕获不会延长引用变量的生命周期（Lambda表达式所在函数形参临时，调用后即销毁）
	- 按值捕获（非=）私有成员变量会导致无法编译

8. 新增容器
1）std::array：保存在栈内存中（std::vector保存在堆内存中）
2）std::forward_list：单向链表实现的列表容器（std::list是双向链表实现），提供了O(1)复杂度的元素插入，不支持快速随机访问，不支持size()
3）std::tuple：元组，不包含任何结构，可返回多个值
	- std::make_tuple: 构造元组
	- std::get: 获得元组某个位置的值
	- std::tie: 元组拆包
4）无序容器：std::unordered_map/std::unordered_multimap/std::unordered_set/std::unordered_multiset